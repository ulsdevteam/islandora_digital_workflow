<?php

/**
 * @file
 * Install/uninstall hooks.
 */

/**
 * Implements hook_uninstall().
 */
function islandora_digital_workflow_install() {
  $new_vocab = (object) array(
      'name' => 'Islandora Digital Workflow Stage vocabulary',
      'description' => 'This vocabulary has the various stages for ' .
        'workflow_batch nodes.',
      'machine_name' => IDW_STAGE_TAXONOMY_MACHINE_NAME,
   );
  taxonomy_vocabulary_save($new_vocab);
  // add the individual "Stage" vocabulary terms
  list($stage_tid, $stage_vid) = islandora_digital_workflow_add_workflow_stage_taxonomy_terms();

  $new_vocab = (object) array(
      'name' => 'Islandora Digital Workflow Content Type vocabulary',
      'description' => 'This vocabulary has the various content types for ' .
        'workflow_batch nodes (related to Islandora content models).',
      'machine_name' => IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME,
   );
  taxonomy_vocabulary_save($new_vocab);
  // add the individual "Content Type" vocabulary terms
  islandora_digital_workflow_add_workflow_content_type_taxonomy_terms();
  // Insert any `islandora_digital_workflow` MySQL records.
  islandora_digital_workflow_insert_islandora_digital_workflow_actions();

  // Insert workflow_batch node_type and create required CCK fields.
  islandora_digital_workflow_insert_workflow_batch_node_type();
  islandora_digital_workflow_create_cck_fields($stage_tid, $stage_vid);
}

/**
 * Implements hook_uninstall().
 */
function islandora_digital_workflow_uninstall() {
  module_load_include('module', 'islandora_digital_workflow', 'islandora_digital_workflow');
  // Remove the taxonomy that are related to islandora_digital_workflow.
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_STAGE_TAXONOMY_MACHINE_NAME);
  taxonomy_vocabulary_delete($vocab->vid);
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME);
  taxonomy_vocabulary_delete($vocab->vid);
  // Remove any variables.
  variable_del('islandora_digital_workflow_islandora_models');
  variable_del('islandora_digital_workflow_stages');
  variable_del('islandora_digital_workflow_rules_one');
  variable_del('islandora_digital_workflow_ingest_namespace');
  variable_del('islandora_digital_workflow_ingest_prepared_path');
  variable_del('islandora_digital_workflow_hosts_for_ingest');
  variable_del('islandora_digital_workflow_use_isMemberOfSite');

  foreach (array_keys(_islandora_digital_workflow_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'workflow_batch');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
}

/**
* Implementation of hook_schema().
*/
function islandora_digital_workflow_schema() {
  // create the database table that stores the solr session user keys
  $schema['islandora_digital_workflow_batch'] = array(
    'description' => t('The additional batch properties and defaults that are ' .
        'not stored on the node object.'),
    'fields' => array(
      'batch_id' => array(
        'description' => 'The primary identifier for the record',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_name' => array(
        'description' => 'The name of the batch',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'default_type_of_resource' => array(
        'description' => 'The fedora model for the destination islandora objects',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'batch_description' => array(
        'description' => 'The description for the batch',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'is_batch_active' => array(
        'description' => 'Is the batch Active?',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'is_batch_request' => array(
        'description' => 'Is the batch a special request?',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_requestor' => array(
        'description' => 'The name of whoever requested this batch',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'batch_request_due_date' => array(
        'description' => 'Due date if the batch is a request',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'default_ead_id' => array(
        'description' => 'The Finding Aid related to the batch',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'object_count' => array(
        'description' => 'Number of objects in batch',
        'type' => 'int',
        'size' => 'small', // limit goes to 8388607
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uploaded_csv_file' => array(
        'description' => 'The CSV file that was uploaded',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'batch_host' => array(
        'description' => 'The host for the files related to the batch',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'ingest_namespace' => array(
        'description' => 'The ingest namespace for the destination islandora objects',
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
      'mapto_collections' => array(
        'description' => 'The Collection for destination islandora objects',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'mapto_site_id_values' => array(
        'description' => 'The Site for destination islandora objects',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'default_depositor' => array(
        'description' => 'Default depositor for destination islandora objects',
        'type' => 'varchar',
        'length' => 100,
        'not null' => FALSE,
      ),
      'default_genre' => array(
        'description' => 'Genre value for destination islandora objects',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'batch_default_CR_status' => array(
        'description' => 'Default Copyright status destination islandora objects',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
      ),
      'batch_default_pub_status' => array(
        'description' => 'Default Publication Status destination islandora objects',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
      ),
      'batch_default_CR_holder' => array(
        'description' => 'Default Copyright Holder Name destination islandora objects',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'nid' => array(
        'description' => 'Drupal node nid value',
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => FALSE,
      ),
      'user' => array(
        'description' => 'Drupal user',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'lastmod' => array(
        'description' => 'Last modified date of the record',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'ss_default_type_of_resource' => array('default_type_of_resource'),
    ),
    'unique keys' => array(
      'u_batch_name' => array('batch_name'),
    ),
    'primary key' => array('batch_id'),
  );

  $schema['islandora_digital_workflow_batch_items'] = array(
    'description' => t('Individual objects of the batch.'),
    'fields' => array(
      'batch_item_id' => array(
        'description' => 'The primary identifier for the record',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_id' => array(
        'description' => 'The batch_id for related ' .
          'islandora_digital_workflow_batch record',
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'identifier' => array(
        'description' => 'The identifier for the object',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The fedora model for the destination islandora objects',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'filename' => array(
        'description' => 'The description for the batch',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'mods' => array(
        'description' => 'MODS xml created from CSV row for object',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'ss_batch_id' => array('batch_id'),
    ),
    'unique keys' => array(
      'u_batch_id_identifier' => array('batch_id', 'identifier'),
    ),
    'primary key' => array('batch_item_id'),
  );
  $schema['islandora_digital_workflow_actions'] = array(
    'description' => t('Stores the actions that can be performed for each batch ' .
        'related to a defined islandora_digital_workflow_model_sequence'),
    'fields' => array(
      'action_id' => array(
        'description' => 'The primary identifier for the record',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'ss_name' => array('name'),
    ),
    'primary key' => array('action_id'),
  );
  $schema['islandora_digital_workflow_transactions'] = array(
    'description' => t('Stores transactions related to batch and batch items'),
    'fields' => array(
      'action_id' => array(
        'description' => 'The action_id for the transction for a related ' .
          'islandora_digital_workflow_actions record',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_id' => array(
        'description' => 'The batch_id for related ' .
          'islandora_digital_workflow_batch record',
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'batch_item_id' => array(
        'description' => 'The batch_item_id for a related ' .
          'islandora_digital_workflow_batch_items record',
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'timestamp' => array(
        'description' => 'Last modified date of the record',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'ss_action_id_batch_item_id_batch_id' => array('action_id', 'batch_item_id', 'batch_id'),
    ),
  );
  return $schema;
}

/**
 * Helper function to create the content type taxonomy vocabulary.
 */
function islandora_digital_workflow_add_workflow_content_type_taxonomy_terms() {
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME);

  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  $models = islandora_digital_workflow_get_reduced_readable_cmodels();

  foreach ($models as $cmodel => $readable_name) {
    $term = (object) array(
     'name' => $readable_name,
     'description' => 'This is for workflow_batch nodes for creating Islandora ' .
        'objects of the ' . $cmodel . ' content model.',
     'vid' => $vocab->vid,
    );
    taxonomy_term_save($term);
  }
}

/**
 * Helper function to create the workflow stage taxonomy vocabulary.
 */
function islandora_digital_workflow_add_workflow_stage_taxonomy_terms() {
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_STAGE_TAXONOMY_MACHINE_NAME);

  $term = (object) array(
   'name' => 'Problem',
   'description' => 'This is for workflow_batch nodes that have a problem.',
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => 'New',
   'description' => 'This is for workflow_batch nodes that are new.',
   'vid' => $vocab->vid,
  );
  $new_tid = taxonomy_term_save($term);

  $term = (object) array(
   'name' => 'Scanned',
   'description' => 'This is for workflow_batch nodes that have been scanned.',
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => 'Reviewed',
   'description' => 'This is for workflow_batch nodes that have been reviewed.',
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => 'Done',
   'description' => 'This is for workflow_batch nodes that are done.',
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  // Need to return the term id for the "New" term:
  return array($vocab->vid, $new_tid);
}

/**
 * Helper routine to insert islandora_digital_workflow_actions records.
 */
function islandora_digital_workflow_insert_islandora_digital_workflow_actions() {
  $islandora_digital_workflow_actions = array(
    // defaults for batch_item actions
    1 => array(
      'name' => 'check-in',
      'description' => 'Check in physical item',
    ),
    2 => array(
      'name' => 'scan',
      'description' => 'Scan the item',
    ),
    3 => array(
      'name' => 'ingest',
      'description' => 'Ingest item into repository',
    ),
    4 => array(
      'name' => 'check-out',
      'description' => 'Check out physical item',
    ),
    5 => array(
      'name' => 'rescan',
      'description' => 'Rescanned the item',
    ),
    // batch-level actions (action_id values greater than 100).
    101 => array(
      'name' => 'all-check-in',
      'description' => 'Check in all physical items',
    ),
    102 => array(
      'name' => 'all-scan',
      'description' => 'Scanned all items',
    ),
    103 => array(
      'name' => 'all-ingest',
      'description' => 'Ingested all items into repository',
    ),
    104 => array(
      'name' => 'all-check-out',
      'description' => 'Checked out all physical items',
    ),
  );
  foreach ($islandora_digital_workflow_actions as $action_id => $values) {
    $values = db_insert('islandora_digital_workflow_actions')
      ->fields(array(
        'action_id' => $action_id,
        'name' => $values['name'],
        'description' => $values['description'],
      ))
    ->execute();
  }
}

function islandora_digital_workflow_insert_workflow_batch_node_type() {
  // This is so much easier as a single SQL:
  db_query("REPLACE INTO `node_type` (`type`, `name`, `base`, `module`, " .
      "`description`, `help`, `has_title`, `title_label`, `custom`, `modified`, " .
      "`locked`, `disabled`, `orig_type`) VALUES ('workflow_batch', " .
      "'Workflow Batch', 'node_content', 'node', '', '', 1, 'Title', 1, 1, 0, " .
      "0, 'workflow_batch');");
}

function islandora_digital_workflow_create_cck_fields($stage_tid, $stage_vid) {
  foreach (_islandora_digital_workflow_installed_fields() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  foreach (_islandora_digital_workflow_installed_instances() as $instance) {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
}

function _islandora_digital_workflow_installed_instances($stage_tid = 0, $stage_vid = 0) {
  return array(
    'field_pid_count' => array(
      'field_name' => 'field_pid_count',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Object Count',
      'widget' => array(
        'weight' => 4,
        'type' => 'number',
        'module' => 'number',
        'active' => 0,
        'settings' => array(),
      ),
      'settings' => array(
        'min' => 1,
        'max' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'number_integer',
          'weight' => 0,
          'settings' => array(
            'thousand_separator' => ',',
            'prefix_suffix' => 1,
            'decimal_separator' => '.',
            'scale' => 0,
          ),
          'module' => 'number',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'number_integer',
          'weight' => 2,
          'settings' => array(
            'thousand_separator' => ',',
            'decimal_separator' => '.',
            'scale' => 0,
            'prefix_suffix' => 1,
          ),
          'module' => 'number',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'number_integer',
          'weight' => 2,
          'settings' => array(
            'thousand_separator' => ',',
            'decimal_separator' => '.',
            'scale' => 0,
            'prefix_suffix' => 1,
          ),
          'module' => 'number',
        ),
      ),
      'default_value' => array(
        '0' => array('value' => 1,),
      ),
    ),
    'field_batch_name' => array(
      'field_name' => 'field_batch_name',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Batch name',
      'widget' => array(
        'weight' => 3,
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array('size' => 60,),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 4,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 0,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 0,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
    'field_collections_mapping' => array(
      'field_name' => 'field_collections_mapping',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Collections mapping',
      'widget' => array(
        'weight' => 7,
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array('size' => 60,),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 5,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 4,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 4,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
    'field_sites_mapping' => array(
      'field_name' => 'field_sites_mapping',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Sites mapping',
      'widget' => array(
        'weight' => 8,
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array('size' => 60,),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 6,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 3,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 3,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
    'field_batch_defaults' => array(
      'field_name' => 'field_batch_defaults',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Batch Defaults',
      'widget' => array(
        'weight' => 9,
        'type' => 'text_textarea',
        'module' => 'text',
        'active' => 1,
        'settings' => array('rows' => 5,),
      ),
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => 7,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => 7,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'hidden',
          'weight' => 5,
          'settings' => array(),
        ),
      ),
      'default_value' => '',
    ),

    'field_stage' => array(
      'field_name' => 'field_stage',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Stage',
      'widget' => array(
        'weight' => 1,
        'type' => 'taxonomy_autocomplete',
        'module' => 'taxonomy',
        'active' => 0,
        'settings' => array(
          'size' => 60,
          'autocomplete_path' => 'taxonomy/autocomplete',
        ),
      ),
      'settings' => array('user_register_form' => '',),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'full' => array(
          'label' => 'above',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
      ),
      'default_value' => array(
        '0' => array(
          'tid' => $stage_tid,
          'vid' => $stage_vid,
          'name' => 'New',
          'description' => 'This is for workflow_batch nodes that are new.',
          'format' => '',
          'weight' => 0,
          'vocabulary_machine_name' => 'workflow_stage_vocab',
          'rdf_mapping' => array(
            'rdftype' => array('0' => 'skos:Concept',),
            'name' => array(
              'predicates' => array(
                '0' => 'rdfs:label',
                '1' => 'skos:prefLabel',
              ),
            ),
            'description' => array(
              'predicates' => array('0' => 'skos:definition',),
            ),
            'vid' => array(
              'predicates' => array('0' => 'skos:inScheme',),
              'type' => 'rel',
            ),
            'parent' => array(
              'predicates' => array('0' => 'skos:broader',),
              'type' => 'rel',
            ),
          ),
        ),
      ),
    ),
    'field_identifiers' => array(
      'field_name' => 'field_identifiers',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => 'This should not be edited manually.  The system populates ' .
        'this by parsing the batch\'s uploaded CSV file.',
      'label' => 'Identifiers',
      'widget' => array(
        'weight' => 5,
        'type' => 'text_textarea',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'rows' => 5,
        ),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => 2,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'above',
          'type' => 'text_default',
          'weight' => 5,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
  );
}

function _islandora_digital_workflow_installed_fields() {
  return array(
    'field_pid_count' => array(
      'field_name' => 'field_pid_count',
      'type' => 'number_integer',
      'entity_types' => array('node'),
      'module' => 'number',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(),
        'storage' => array(
          'type' => 'field_sql_storage',
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_pid_count' => array('value' => 'field_pid_count_value'),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_pid_count' => array('value' => 'field_pid_count_value'),
              ),
            ),
          ),
        ),
      ),
    ),
    'field_batch_name' => array(
      'field_name' => 'field_batch_name',
      'type' => 'text',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array('max_length' => 255),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_batch_name' => array(
                  'value' => 'field_batch_name_value',
                  'format' => 'field_batch_name_format',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_batch_name' => array(
                  'value' => 'field_batch_name_value',
                  'format' => 'field_batch_name_format',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'format' => array(
            'table' => 'filter_format',
            'columns' => array('format' => 'format',),
          ),
        ),
        'indexes' => array(
          'format' => array('0' => 'format',),
        ),
      ),
    ),
    'field_collections_mapping' => array(
      'field_name' => 'field_collections_mapping',
      'type' => 'text',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array('max_length' => 255),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_collections_mapping' => array(
                  'value' => 'field_collections_mapping_value',
                  'format' => 'field_collections_mapping_format',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_collections_mapping' => array(
                  'value' => 'field_collections_mapping_value',
                  'format' => 'field_collections_mapping_format',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'format' => array(
            'table' => 'filter_format',
            'columns' => array('format' => 'format',),
          ),
        ),
        'indexes' => array(
          'format' => array('0' => 'format',),
        ),
      ),
    ),
    'field_sites_mapping' => array(
      'field_name' => 'field_sites_mapping',
      'type' => 'text',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array('max_length' => 255,),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_sites_mapping' => array(
                  'value' => 'field_sites_mapping_value',
                  'format' => 'field_sites_mapping_format',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_sites_mapping' => array(
                  'value' => 'field_sites_mapping_value',
                  'format' => 'field_sites_mapping_format',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'format' => array(
            'table' => 'filter_format',
            'columns' => array('format' => 'format',),
          ),
        ),
        'indexes' => array(
          'format' => array('0' => 'format',),
        ),
      ),
    ),
    'field_batch_defaults' => array(
      'field_name' => 'field_batch_defaults',
      'type' => 'text_long',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_batch_defaults' => array(
                  'value' => 'field_batch_defaults_value',
                  'format' => 'field_batch_defaults_format',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_batch_defaults' => array(
                  'value' => 'field_batch_defaults_value',
                  'format' => 'field_batch_defaults_format',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'format' => array(
            'table' => 'filter_format',
            'columns' => array('format' => 'format'),
          ),
        ),
        'indexes' => array(
          'format' => array('0' => 'format',),
        ),
      ),
    ),
    'field_stage' => array(
      'field_name' => 'field_stage',
      'type' => 'taxonomy_term_reference',
      'entity_types' => array('node'),
      'module' => 'taxonomy',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(
          'allowed_values' => array(
            '0' => array(
              'vocabulary' => 'workflow_stage_vocab',
              'parent' => 0,
            ),
          ),
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_stage' => array('tid' => 'field_stage_tid',),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_stage' => array('tid' => 'field_stage_tid',),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'tid' => array(
            'table' => 'taxonomy_term_data',
            'columns' => array('tid' => 'tid',),
          ),
        ),
        'indexes' => array(
          'tid' => array('0' => 'tid',),
        ),
      ),
    ),
    'field_identifiers' => array(
      'field_name' => 'field_identifiers',
      'type' => 'text_long',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_identifiers' => array(
                  'value' => 'field_identifiers_value',
                  'format' => 'field_identifiers_format',
                ),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_identifiers' => array(
                  'value' => 'field_identifiers_value',
                  'format' => 'field_identifiers_format',
                ),
              ),
            ),
          ),
        ),
        'foreign keys' => array(
          'format' => array(
            'table' => 'filter_format',
            'columns' => array('format' => 'format',),
          ),
        ),
        'indexes' => array(
          'format' => array('0' => 'format',),
        ),
      ),
    ),
  );
}

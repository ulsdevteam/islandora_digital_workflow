<?php

/**
 * @file
 * Install/uninstall hooks.
 */

/**
 * Implements hook_uninstall().
 */
function islandora_digital_workflow_install() {
  islandora_digital_workflow_add_taxonomy_data();

  // Insert any `islandora_digital_workflow` MySQL records.
  islandora_digital_workflow_insert_islandora_digital_workflow_actions();

  // Insert workflow_batch node_type and create required CCK fields.
  islandora_digital_workflow_insert_workflow_batch_node_type();
  islandora_digital_workflow_create_cck_fields();

  // This will prevent these nodes from displaying that annoying info when
  // rendered such as: "Submitted by TARKA on Tue, 10/02/2018 - 14:28"
  variable_set('node_submitted_workflow_batch', FALSE);
  // Need to install the forena reports files
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  islandora_digital_workflow_check_and_deploy_forena_reports();
}

/**
 * Procedure to only add the taxonomy vocabularies and actually calls
 * islandora_digital_workflow_add_workflow_*_taxonomy_terms functions to
 * insert the individual terms.
 */
function islandora_digital_workflow_add_taxonomy_data() {
  global $priority_vocab;
  global $stage_vocab;

  $stage_vocab = (object) array(
      'name' => 'Islandora Digital Workflow Stage vocabulary',
      'description' => t('This vocabulary has the various stages for ' .
        'workflow_batch nodes.'),
      'machine_name' => IDW_STAGE_TAXONOMY_MACHINE_NAME,
   );
  taxonomy_vocabulary_save($stage_vocab);
  $stage_vocab = taxonomy_vocabulary_machine_name_load(IDW_STAGE_TAXONOMY_MACHINE_NAME);
  // add the individual "Stage" vocabulary terms
  islandora_digital_workflow_add_workflow_stage_taxonomy_terms();

  $new_vocab = (object) array(
      'name' => 'Islandora Digital Workflow Content Type vocabulary',
      'description' => t('This vocabulary has the various content types for ' .
        'workflow_batch nodes (related to Islandora content models).'),
      'machine_name' => IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME,
   );
  taxonomy_vocabulary_save($new_vocab);
  // add the individual "Content Type" vocabulary terms
  islandora_digital_workflow_add_workflow_content_type_taxonomy_terms();

  $priority_vocab = (object) array(
      'name' => 'Islandora Digital Workflow Batch Priority vocabulary',
      'description' => t('This vocabulary has the various priority levels for ' .
        'workflow_batch nodes.'),
      'machine_name' => IDW_BATCH_PRIORITY_TAXONOMY_MACHINE_NAME,
   );
  taxonomy_vocabulary_save($priority_vocab);
  // add the individual "Batch Priority" vocabulary terms
  islandora_digital_workflow_add_workflow_batch_priority_taxonomy_terms();
}

/**
 * Implements hook_uninstall().
 */
function islandora_digital_workflow_uninstall() {
  module_load_include('module', 'islandora_digital_workflow', 'islandora_digital_workflow');
  // Remove the taxonomy that are related to islandora_digital_workflow.
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_STAGE_TAXONOMY_MACHINE_NAME);
  taxonomy_vocabulary_delete($vocab->vid);
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME);
  taxonomy_vocabulary_delete($vocab->vid);
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_BATCH_PRIORITY_TAXONOMY_MACHINE_NAME);
  taxonomy_vocabulary_delete($vocab->vid);

  // Remove any variables.
  variable_del('islandora_digital_workflow_islandora_models');
  variable_del('islandora_digital_workflow_stages');
  variable_del('islandora_digital_workflow_rules_one');
  variable_del('islandora_digital_workflow_ingest_namespace');
  variable_del('islandora_digital_workflow_ingest_prepared_path');
  variable_del('islandora_digital_workflow_use_isMemberOfSite');
  variable_del('islandora_digital_workflow_delete_delivery_files');
  variable_del('islandora_digital_workflow_delete_delivery_files_INTENDED_VAL');
  variable_del('islandora_digital_workflow_handle_islandora_hook');
  variable_del('islandora_digital_workflow_ingest_delivery_path');
  variable_del('islandora_digital_workflow_ingest_problems_path');
  variable_del('node_submitted_workflow_batch');
  variable_del('islandora_digital_workflow_assign_PIDs');
  variable_del('islandora_digital_workflow_top_level_collection');
  variable_del('islandora_digital_workflow_ingest_ignore_filenames');

  // Loop through the fields that are created for this module and delete them.
  // As a side-effect, this results in field_deleted_* tables being created on
  // the database, but these disappear after the drupal cron runs.
  foreach (array_keys(_islandora_digital_workflow_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'workflow_batch');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete the nodes that might have been created that are "workflow_batch" type.
  module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
  islandora_digital_workflow_delete_workflow_batch_nodes();
}

/**
 * Implements hook_enable().
 *
 * Since Drupal module schema code makes it impossible to set up a timestamp
 * field that updates with CURRENT_TIMESTAMP, this must be done during the
 * module_hook_enable.
 */
function islandora_digital_workflow_enable() {
  db_query("ALTER TABLE `islandora_digital_workflow_batch` CHANGE COLUMN " .
    "`lastmod` `lastmod` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");
  db_query("ALTER TABLE `islandora_digital_workflow_batch` CHANGE COLUMN " .
    "`created` `created` TIMESTAMP NULL");
  db_query("ALTER TABLE `islandora_digital_workflow_transactions` " .
    "CHANGE COLUMN `timestamp` `timestamp` TIMESTAMP NULL DEFAULT " .
    "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");
  db_query("ALTER TABLE `islandora_digital_workflow_sequence_actions` " .
    "CHANGE COLUMN `timestamp` `timestamp` TIMESTAMP NULL DEFAULT " .
    "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");
  db_query("ALTER TABLE `islandora_digital_workflow_drush_log` " .
    "CHANGE COLUMN `timestamp` `timestamp` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");
  db_query("ALTER TABLE `islandora_digital_workflow_problem_items` " .
    "CHANGE COLUMN `problem_timestamp` `problem_timestamp` TIMESTAMP NULL");
  db_query("ALTER TABLE `islandora_digital_workflow_problem_items` " .
    "CHANGE COLUMN `problem_resolved_timestamp` `problem_resolved_timestamp` TIMESTAMP NULL");
}

/**
* Implementation of hook_schema().
*/
function islandora_digital_workflow_schema() {
  // Create the database tables that stores all of the required workflow values.
  // Some of these are for tracking the workflow, others are for configurations.
  $schema['islandora_digital_workflow_actions'] = array(
    'description' => t('Stores the actions that can be performed for each batch ' .
        'related to a defined islandora_digital_workflow_model_sequence'),
    'fields' => array(
      'action_id' => array(
        'description' => t('The primary identifier for the record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'extra_info' => array(
        'type' => 'varchar',
        'description' => t('Setup values only - this is never editable in the ' .
            'interface.  The additional action info for special actions.'),
        'length' => 255,
        'not null' => TRUE,
      ),

      'glyph' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'is_batch_action' => array(
        'description' => t('Is the action for a batch or a batch_item?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'is_system_action' => array(
        'description' => t('Is the action triggered by the system?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'stage_taxonomy_tid' => array(
        'description' => t('The optional taxonomy term tid value to set the related Stage'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'is_triggered_by_single_item' => array(
        'description' => t('If this is for a "Batch Item" action, trigger by a single batch_item?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'stage_taxonomy_tid_rm' => array(
        'description' => t('The optional taxonomy term tid value to REMOVE the related Stage'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'is_triggered_by_single_item_rm' => array(
        'description' => t('If this is for a "Batch Item" action, trigger REMOVAL by a single batch_item?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'ss_name' => array('name'),
    ),
    'primary key' => array('action_id'),
  );
  $schema['islandora_digital_workflow_batch'] = array(
    'description' => t('The additional batch properties and defaults that are ' .
        'not stored on the node object.'),
    'fields' => array(
      'batch_id' => array(
        'description' => t('The primary identifier for the record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_name' => array(
        'description' => t('Batch name'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'islandora_model' => array(
        'description' => t('Islandora Model for the objects in the batch'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
        'default' => '',
      ),
      'batch_description' => array(
        'description' => t('Batch description'),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'batch_priority_tid' => array(
        'description' => t('Batch priority (Drupal taxonomy term tid value)'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => FALSE,
      ),
      'is_batch_active' => array(
        'description' => t('Is the batch Active?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'is_batch_request' => array(
        'description' => t('Is the batch a special request?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_requestor' => array(
        'description' => t('Requester who may have requested this batch'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'batch_request_due_date' => array(
        'description' => t('Due date if the batch is a request'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'default_ead_id' => array(
        'description' => t('Finding Aid related to the batch'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'object_count' => array(
        'description' => t('Number of objects in batch'),
        'type' => 'int',
        'size' => 'small', // limit goes to 8388607
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uploaded_batch_items_file' => array(
        'description' => t('Items file (raw) uploaded to the batch'),
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'ingest_namespace' => array(
        'description' => t('Ingest namespace'),
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
      'mapto_collections' => array(
        'description' => t('Islandora Collection(s)'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'mapto_site_id_values' => array(
        'description' => t('Site'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'ocr_language' => array(
        'description' => t('Character set to use for the OCR process'),
        'type' => 'varchar',
        'length' => 10,
        'not null' => FALSE,
      ),
      'default_depositor' => array(
        'description' => t('Default depositor'),
        'type' => 'varchar',
        'length' => 100,
        'not null' => FALSE,
      ),
      'default_type_of_resource' => array(
        'description' => t('Type of resource'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'default_genre' => array(
        'description' => t('Default genre'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'batch_default_CR_status' => array(
        'description' => t('Default Copyright status'),
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
      ),
      'batch_default_pub_status' => array(
        'description' => t('Default Publication Status'),
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
      ),
      'batch_default_CR_holder' => array(
        'description' => t('Default Copyright Holder Name'),
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'nid' => array(
        'description' => t('Drupal node nid value'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => FALSE,
      ),
      'workflow_sequence_id' => array(
        'description' => t('Workflow sequence'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => FALSE,
      ),
      'webform_submission_sid'  => array(
        'description' => t('Webform submission sid value'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => FALSE,
      ),
      // Internal / system calculated fields
      'progress' => array(
        'description' => t('The progress for the individual object'),
        'type' => 'varchar',
        // possible values "New", "In Progress", "Prepared", "Completed"
        'default' => 'New',
        'length' => 11,
        'not null' => FALSE,
      ),
      'user' => array(
        'description' => t('Drupal user'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'lastmod' => array(
        'description' => t('Last modified date of the record (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => t('Created date of the record (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'ss_default_type_of_resource' => array('default_type_of_resource'),
    ),
    'unique keys' => array(
      'u_batch_name' => array('batch_name'),
    ),
    'primary key' => array('batch_id'),
  );

  $schema['islandora_digital_workflow_batch_items'] = array(
    'description' => t('Individual objects of the batch.'),
    'fields' => array(
      'batch_item_id' => array(
        'description' => t('The primary identifier for the record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_id' => array(
        'description' => t('The batch_id for related ' .
          'islandora_digital_workflow_batch record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'identifier' => array(
        'description' => t('The identifier for the object'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => t('The item title'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'filename' => array(
        'description' => t('The description for the batch'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'type_of_resource' => array(
        'description' => t('The type of Islandora object'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'islandora_model' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
        'default' => '',
      ),
      'assigned_pid' => array(
        'description' => t('The Islandora PID value for the item.  This may be ' .
          'used for assigning the value, or updated from the auto-generated ' .
          'value after ingest.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ),
      'mods' => array(
        'description' => t('MODS xml created from CSV row for object'),
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'marc' => array(
        'description' => t('MARC (MAchine-Readable Cataloging) record for object'),
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      // Internal / system calculated fields
      'progress' => array(
        'description' => t('The progress for the individual object'),
        'type' => 'varchar',
        // possible values "New", "In Progress", "Prepared", "Completed"
        'default' => 'New',
        'length' => 11,
        'not null' => FALSE,
      ),
      'file_count' => array(
        'description' => t('The total number of files related to this item'),
        'type' => 'int',
        'size' => 'small', // limit goes to 8388607
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'file_size' => array(
        'description' => t('The total size of the files related to this item (in bytes)'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'ss_batch_id' => array('batch_id'),
    ),
    'unique keys' => array(
      'u_batch_id_identifier' => array('batch_id', 'identifier'),
    ),
    'primary key' => array('batch_item_id'),
  );
  $schema['islandora_digital_workflow_drush_log'] = array(
    'description' => t('Stores any drush commands that have been called relating to batches and batch items'),
    'fields' => array(
      'drush_log_id' => array(
        'description' => t('The drush_log_id for a drush command'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_id' => array(
        'description' => t('The batch_id for related ' .
          'islandora_digital_workflow_batch record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'batch_item_id' => array(
        'description' => t('The batch_item_id for a related ' .
          'islandora_digital_workflow_batch_items record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'drupal_uid' => array(
        'description' => t('The drupal user uid value related to the transaction'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'drush_command' => array(
        'description' => t('The fully qualified drush command that is called by the web server'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'output' => array(
        'description' => t('The output of the drush call'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'return_val' => array(
        'description' => t('The return value of the drush call'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => t('Last modified date of the record (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('drush_log_id'),
    'indexes' => array(
      'ss_batch_item_id_batch_id' => array('batch_item_id', 'batch_id'),
    ),
  );
  $schema['islandora_digital_workflow_problem_items'] = array(
    'description' => t('Stores problem transactions related to batch items'),
    'fields' => array(
      'problem_id' => array(
        'description' => t('Autoincrement primary key for this table'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'transaction_id' => array(
        'description' => t('The transaction_id related to the action entered as a problem'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'problem_notes' => array(
        'description' => t('Notes on the nature of the problem with the scanned item'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'problem_timestamp' => array(
        'description' => t('Last modified date of the record (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'problem_resolved_timestamp' => array(
        'description' => t('Date when this problem was resolved (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'drupal_uid' => array(
        'description' => t('The drupal user uid value related to the transaction'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('problem_id'),
  );
  $schema['islandora_digital_workflow_process_set'] = array(
    'description' => t('Stores sets of process identifiers with a specific mode'),
    'fields' => array(
      'process_set_id' => array(
        'description' => t('Autoincrement primary key for this table'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'set_mode' => array(
        'description' => t('The mode of processing for the set of items.'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'timestamp' => array(
        'description' => t('Last modified date of the record'),
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('process_set_id'),
  );
  $schema['islandora_digital_workflow_process_set_items'] = array(
    'description' => t('Stores the items related to a processing set where the '.
        'islandora_digital_workflow_process_set table joins to the ' .
        'islandora_digital_workflow_batch_items table.'),
    'fields' => array(
      'process_set_id' => array(
        'description' => t('The process_set_id for related ' .
          'islandora_digital_workflow_process_set record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_item_id' => array(
        'description' => t('The batch_item_id for related ' .
          'islandora_digital_workflow_batch_items record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('process_set_id', 'batch_item_id'),
  );
  $schema['islandora_digital_workflow_sequence'] = array(
    'description' => t('Stores the workflow sequences'),
    'fields' => array(
      'workflow_sequence_id' => array(
        'description' => t('The primary identifier for the record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'is_mixed' => array(
        'description' => t('Does the workflow sequence represent more than one object model?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'ss_name' => array('name'),
    ),
    'primary key' => array('workflow_sequence_id'),
  );
  $schema['islandora_digital_workflow_model_sequence'] = array(
    'description' => t('Stores the workflow sequence to models relationship'),
    'fields' => array(
      'workflow_sequence_id' => array(
        'description' => t('Identifier to match an islandora_digital_workflow_sequence record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'islandora_model' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('workflow_sequence_id', 'islandora_model'),
  );
  $schema['islandora_digital_workflow_sequence_actions'] = array(
    'description' => t('Stores the workflow sequence actions, their order, and whether they are required'),
    'fields' => array(
      'workflow_sequence_id' => array(
        'description' => t('The primary identifier for the record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'action_id' => array(
        'type' => 'int',
        'size' => 'medium',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'islandora_model' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
        'default' => '',
      ),
      'order' => array(
        'type' => 'int',
        'size' => 'medium',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'is_required' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'is_ingest_prerequisite' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => t('Last modified date of the record (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'ss_workflow_sequence_id_action_id_order' => array('workflow_sequence_id', 'action_id', 'order'),
      'ss_timestamp' => array('timestamp'),
    ),
    'primary key' => array('workflow_sequence_id', 'action_id', 'islandora_model'),
  );
  $schema['islandora_digital_workflow_transactions'] = array(
    'description' => t('Stores transactions related to batch and batch items'),
    'fields' => array(
      'transaction_id' => array(
        'description' => t('The action_id for the transction for a related ' .
          'islandora_digital_workflow_actions record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'action_id' => array(
        'description' => t('The action_id for the transction for a related ' .
          'islandora_digital_workflow_actions record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_id' => array(
        'description' => t('The batch_id for related ' .
          'islandora_digital_workflow_batch record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'batch_item_id' => array(
        'description' => t('The batch_item_id for a related ' .
          'islandora_digital_workflow_batch_items record'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'drupal_uid' => array(
        'description' => t('The drupal user uid value related to the transaction'),
        'type' => 'int',
        'size' => 'medium',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'timestamp' => array(
        'description' => t('Last modified date of the record (TIMESTAMP)'),
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('transaction_id'),
    'indexes' => array(
      'ss_action_id_batch_item_id_batch_id' => array('action_id', 'batch_item_id', 'batch_id'),
    ),
  );

  return $schema;
}

/**
 * Helper function to create the content type taxonomy vocabulary.
 */
function islandora_digital_workflow_add_workflow_content_type_taxonomy_terms() {
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME);

  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  $models = islandora_digital_workflow_get_reduced_readable_cmodels();

  foreach ($models as $cmodel => $readable_name) {
    $term = (object) array(
     'name' => $cmodel,
     'description' => t('This is for workflow_batch nodes for creating Islandora ' .
        'objects of the ' . $readable_name . ' content model.'),
     'vid' => $vocab->vid,
    );
    taxonomy_term_save($term);
  }
}

/**
 * Helper function to create the batch priority taxonomy vocabulary.
 */
function islandora_digital_workflow_add_workflow_batch_priority_taxonomy_terms() {
  global $regular_priority_term;

  module_load_include('inc', 'islandora_digital_workflow', 'includes/taxonomy_utilities');
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_BATCH_PRIORITY_TAXONOMY_MACHINE_NAME);

  $term = (object) array(
   'name' => 'Lowest',
   'description' => t('Lowest priority batch.'),
   'vid' => $vocab->vid,
   'weight' => 5,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => 'Low',
   'description' => t('Low priority batch.'),
   'vid' => $vocab->vid,
   'weight' => 4,
  );
  taxonomy_term_save($term);

  $regular_priority_term = (object) array(
   'name' => 'Regular',
   'description' => t('Regular priorty batch.'),
   'vid' => $vocab->vid,
   'weight' => 3,
  );
  taxonomy_term_save($regular_priority_term);

  $term = (object) array(
   'name' => 'High',
   'description' => t('High priorty batch.'),
   'vid' => $vocab->vid,
   'weight' => 2,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => 'Highest',
   'description' => t('Highest priorty batch.'),
   'vid' => $vocab->vid,
   'weight' => 1,
  );
  taxonomy_term_save($term);
}

/**
 * Helper function to create the workflow stage taxonomy vocabulary.
 *
 * @global integer $problem_tid
 *   The term identifier for the "Problem" term in the Stages vocabulary.
 * @global integer $inactive_tid
 *   The term identifier for the "Inactive" term in the Stages vocabulary.
 * @global integer $inprocess_tid
 *   The term identifier for the "In Process" term in the Stages vocabulary.
 */
function islandora_digital_workflow_add_workflow_stage_taxonomy_terms() {
  global $problem_tid;
  global $inactive_tid;
  global $inprocess_tid;
  global $metadata_review_tid;
  global $done_tid;
  global $new_stage_term;

  module_load_include('inc', 'islandora_digital_workflow', 'includes/taxonomy_utilities');
  $vocab = taxonomy_vocabulary_machine_name_load(IDW_STAGE_TAXONOMY_MACHINE_NAME);

  $term = (object) array(
   'name' => t('Problem'),
   'description' => t('This is for workflow_batch nodes that have a problem.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  $problem_tid = islandora_digital_workflow_get_tid_by_name($term->name, $vocab);

  $new_stage_term = (object) array(
   'name' => t('New'),
   'description' => t('This is for workflow_batch nodes that are new.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($new_stage_term);
  $new_stage_term->tid;

  $term = (object) array(
   'name' => t('Scanned'),
   'description' => t('This is for workflow_batch nodes that have been scanned.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => t('Reviewed'),
   'description' => t('This is for workflow_batch nodes that have been reviewed.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);

  $term = (object) array(
   'name' => t('Metadata Review'),
   'description' => t('Metadata review for batches when all metadata has been "completed", but may still need to be quality-controlled.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  $metadata_review_tid = islandora_digital_workflow_get_tid_by_name($term->name, $vocab);

  $term = (object) array(
   'name' => t('In Process'),
   'description' => t('Batch in processing -- automatically contains batches that have had any item checked in -- and not all items checked out.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  $inprocess_tid = islandora_digital_workflow_get_tid_by_name($term->name, $vocab);

  $term = (object) array(
   'name' => t('Inactive'),
   'description' => t('Batch is inactive.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  $inactive_tid = islandora_digital_workflow_get_tid_by_name($term->name, $vocab);

  $term = (object) array(
   'name' => t('Done'),
   'description' => t('This is for workflow_batch nodes that are done.'),
   'vid' => $vocab->vid,
  );
  taxonomy_term_save($term);
  $done_tid = islandora_digital_workflow_get_tid_by_name($term->name, $vocab);
}

/**
 * Helper routine to insert islandora_digital_workflow_actions records.
 *
 * @global integer $problem_tid
 *   The term identifier for the "Problem" term in the Stages vocabulary.
 * @global integer $inactive_tid
 *   The term identifier for the "Inactive" term in the Stages vocabulary.
 * @global integer $inprocess_tid
 *   The term identifier for the "In Process" term in the Stages vocabulary.
 */
function islandora_digital_workflow_insert_islandora_digital_workflow_actions() {
  global $problem_tid;
  global $inactive_tid;
  global $inprocess_tid;
  global $metadata_review_tid;
  global $done_tid;

  $islandora_digital_workflow_actions = array(
    // defaults for batch_item actions
    IDW_ACTION_CHECK_IN => array(
      'name' => 'check-in',
      'description' => t('Check in physical item'),
      'glyph' => 'images/check-in-physical-item_20.png',
      'stage_taxonomy_tid' => $inprocess_tid,
      'is_triggered_by_single_item' => 1,
    ),
    IDW_ACTION_ADD_MARC_RECORD => array(
      'name' => 'add-marc-record',
      'description' => t('Add MARC record'),
      'glyph' => 'images/add-marc-record_20.png',
      'is_system_action' => 1,
    ),
    IDW_ACTION_MODS_RECORD_UPDATED => array(
      'name' => 'mods-record-updated',
      'description' => t('MODS record updated'),
      'glyph' => 'images/mods-record-updated_20.png',
      'is_system_action' => 1,
    ),
    IDW_ACTION_MODS_RECORD_COMPLETED => array(
      'name' => 'metadata-completed',
      'description' => t('Metadata Completed'),
      'glyph' => 'images/metadata-completed_20.png',
      'stage_taxonomy_tid' => $metadata_review_tid,
      'is_triggered_by_single_item' => 0,
    ),
    IDW_PUBLISH_OBJECT => array(
      'name' => 'publish-object',
      'description' => t('Publish the item'),
      'extra_info' => t('The system will set the "Collection/s" and "Site/s" relationships for items when this action is assigned.'),
      'glyph' => 'images/publish-object_20.png',
      'stage_taxonomy_tid_rm' => $done_tid,
      'is_triggered_by_single_item_rm' => 0,
    ),
    IDW_ACTION_METADATA_PASS_QC => array(
      'name' => 'metadata-passed-qc',
      'description' => t('Metadata Passed QC'),
      'glyph' => 'images/metadata-passed-qc_20.png',
      'stage_taxonomy_tid_rm' => $metadata_review_tid,
      'is_triggered_by_single_item_rm' => 0,
    ),
    IDW_ACTION_METADATA_FAIL_QC => array(
      'name' => 'metadata-failed-qc',
      'description' => t('Metadata Failed QC'),
      'glyph' => 'images/metadata-failed-qc_20.png',
    ),
    IDW_ACTION_SCAN => array(
      'name' => 'scan',
      'description' => t('Scan the item'),
      'extra_info' => t('blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah'),
      'glyph' => 'images/scan-the-item_20.png',
    ),
    IDW_ACTION_SYSTEM_INGEST => array(
      'name' => 'ingest',
      'description' => t('Ingest item into repository'),
      'extra_info' => t('extra info related to an item being ingested'),
      'glyph' => 'images/ingest-item-into-repository_20.png',
      'is_system_action' => 1,
    ),
    IDW_ACTION_CHECK_OUT => array(
      'name' => 'check-out',
      'description' => t('Check out physical item'),
      'glyph' => 'images/check-out-physical-item_20.png',
      'stage_taxonomy_tid_rm' => $inprocess_tid,
      'is_triggered_by_single_item_rm' => 0,
    ),
    IDW_ACTION_RESCANNED => array(
      'name' => 'rescan',
      'description' => t('Rescanned the item'),
      'glyph' => 'images/rescanned-the-item_20.png',
    ),
    IDW_ACTION_CHECK_PHYSICAL_ITEMS => array(
      'name' => 'check-physical-items',
      'description' => t('Check item against physical object'),
      'glyph' => 'images/check-item-against-physical-object_20.png',
    ),
    IDW_ACTION_SYSTEM_MADE_DERIVATIVES => array(
      'name' => 'system-made-derivatives',
      'description' => t('System made derivatives'),
      'extra_info' => t('extra info related to system derivative creation'),
      'glyph' => 'images/system-made-derivatives_20.png',
      'is_system_action' => 1,
    ),
    // this will also trigger insertion of a record into the
    // islandora_digital_workflow_problem_items table.  The presence of these
    // records in any batch will not cause it to fail -- instead, checking
    // the islandora_digital_workflow_problem_items for any problems that are
    // not resolved.
    IDW_ACTION_PROBLEM => array(
      'name' => 'problem',
      'description' => t('Problem with scan'),
      'extra_info' => t('extra info related to Problem action'),
      'glyph' => 'images/problem_20.png',
      'stage_taxonomy_tid' => $problem_tid,
      'is_triggered_by_single_item' => 1,
    ),
    // batch-level actions (action_id values greater than 100).
    IDW_BATCH_ACTION_INACTIVE => array(
      'name' => 'inactive',
      'description' => t('Make batch inactive'),
      'glyph' => 'images/make-batch-inactive_20.png',
      'stage_taxonomy_tid' => $inactive_tid,
      'is_triggered_by_single_item' => 0,
      'is_batch_action' => 1,
    ),
  );

  foreach ($islandora_digital_workflow_actions as $action_id => $values) {
    $values = db_insert('islandora_digital_workflow_actions')
      ->fields(array(
        'action_id' => $action_id,
        'name' => $values['name'],
        'description' => $values['description'],
        'extra_info' => ((isset($values['extra_info']) && $values['extra_info']) ? $values['extra_info'] : ''),
        'glyph' => $values['glyph'],
        'is_batch_action' => (isset($values['is_batch_action']) ? $values['is_batch_action'] : 0),
        'stage_taxonomy_tid' => (isset($values['stage_taxonomy_tid']) ? $values['stage_taxonomy_tid'] : 0),
        'is_triggered_by_single_item' => (isset($values['is_triggered_by_single_item']) ? $values['is_triggered_by_single_item'] : 0),
        'stage_taxonomy_tid_rm' => (isset($values['stage_taxonomy_tid_rm']) ? $values['stage_taxonomy_tid_rm'] : 0),
        'is_triggered_by_single_item_rm' => (isset($values['is_triggered_by_single_item_rm']) ? $values['is_triggered_by_single_item_rm'] : 0),
      ))
    ->execute();
  }
}

/**
 * Helper function to update the node_type for workflow batch objects
 */
function islandora_digital_workflow_insert_workflow_batch_node_type() {
  // This is so much easier as a single SQL:
  db_query("REPLACE INTO `node_type` (`type`, `name`, `base`, `module`, " .
      "`description`, `help`, `has_title`, `title_label`, `custom`, `modified`, " .
      "`locked`, `disabled`, `orig_type`) VALUES ('workflow_batch', " .
      "'Workflow Batch', 'node_content', 'node', '', '', 1, 'Title', 1, 1, 0, " .
      "0, 'workflow_batch');");
}

/**
 * Helper function to create the CCK fields needed for this module.
 */
function islandora_digital_workflow_create_cck_fields() {
  foreach (_islandora_digital_workflow_installed_fields() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  foreach (_islandora_digital_workflow_installed_instances() as $instance) {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
}

/**
 * Returns the field instances needed to create the View object.
 *
 * @global object $regular_priority_term
 *   The "Regular" priority term - to be used as a default value.
 * @global object $priority_vocab
 *   The Priorities vocabulary - to be used as a default value.
 */
function _islandora_digital_workflow_installed_instances() {
  global $regular_priority_term;
  global $priority_vocab;
  global $new_stage_term;
  global $stage_vocab;

  return array(
    'field_pid_count' => array(
      'field_name' => 'field_pid_count',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Object Count',
      'widget' => array(
        'weight' => 4,
        'type' => 'number',
        'module' => 'number',
        'active' => 0,
        'settings' => array(),
      ),
      'settings' => array(
        'min' => 1,
        'max' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'number_integer',
          'weight' => 0,
          'settings' => array(
            'thousand_separator' => ',',
            'prefix_suffix' => 1,
            'decimal_separator' => '.',
            'scale' => 0,
          ),
          'module' => 'number',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'number_integer',
          'weight' => 2,
          'settings' => array(
            'thousand_separator' => ',',
            'decimal_separator' => '.',
            'scale' => 0,
            'prefix_suffix' => 1,
          ),
          'module' => 'number',
        ),
      ),
      'default_value' => array(
        '0' => array('value' => 1,),
      ),
    ),
    'field_batch_name' => array(
      'field_name' => 'field_batch_name',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Batch name',
      'widget' => array(
        'weight' => 3,
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array('size' => 60,),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 4,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 0,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
    'field_collections_mapping' => array(
      'field_name' => 'field_collections_mapping',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Collections mapping',
      'widget' => array(
        'weight' => 7,
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array('size' => 60,),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 5,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 4,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 4,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
    'field_sites_mapping' => array(
      'field_name' => 'field_sites_mapping',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Sites mapping',
      'widget' => array(
        'weight' => 8,
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array('size' => 60,),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 6,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 3,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'text_default',
          'weight' => 3,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
    'field_batch_defaults' => array(
      'field_name' => 'field_batch_defaults',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => '',
      'label' => 'Batch Defaults',
      'widget' => array(
        'weight' => 9,
        'type' => 'text_textarea',
        'module' => 'text',
        'active' => 1,
        'settings' => array('rows' => 5,),
      ),
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => 7,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => 7,
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'hidden',
          'weight' => 5,
          'settings' => array(),
        ),
      ),
      'default_value' => '',
    ),

    'field_stage' => array(
      'field_name' => 'field_stage',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 1,
      'description' => '',
      'label' => 'Stage',
      'widget' => array(
        'weight' => 1,
        'type' => 'options_select',
        'module' => 'taxonomy',
        'active' => 0,
        'settings' => array(
          'size' => 60,
          'autocomplete_path' => 'taxonomy/autocomplete',
        ),
      ),
      'settings' => array('user_register_form' => '',),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
      ),
      'default_value' => array(
        0 => array(
          'tid' => $new_stage_term->tid,
          'vid' => $stage_vocab->vid,
          'name' => $new_stage_term->name,
          'description' => $new_stage_term->description,
          'format' => isset($new_stage_term->format) ? $new_stage_term->format : NULL,
          'weight' => $new_stage_term->weight,
          'vocabulary_machine_name' => $stage_vocab->machine_name,
        )
      ),
    ),
    'field_islandora_model' => array(
      'field_name' => 'field_islandora_model',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 1,
      'description' => '',
      'label' => 'Islandora Model',
      'widget' => array(
        'weight' => 1,
        'type' => 'taxonomy_autocomplete',
        'module' => 'taxonomy',
        'active' => 0,
        'settings' => array(
          'size' => 60,
          'autocomplete_path' => 'islandora_digital_workflow/autocomplete/content-models',
        ),
      ),
      'settings' => array('user_register_form' => '',),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
      ),
    ),
    'field_priority' => array(
      'field_name' => 'field_priority',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 1,
      'description' => '',
      'label' => 'Batch Priority',
      'widget' => array(
        'weight' => 1,
        'type' => 'taxonomy_autocomplete',
        'module' => 'taxonomy',
        'active' => 0,
        'settings' => array(
          'size' => 60,
          'autocomplete_path' => 'taxonomy/autocomplete',
        ),
      ),
      'settings' => array('user_register_form' => '',),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'teaser' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
        'full' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 1,
          'settings' => array(),
          'module' => 'taxonomy',
        ),
      ),
      'default_value' => array(
        0 => array(
          'tid' => $regular_priority_term->tid,
          'vid' => $priority_vocab->vid,
          'name' => $regular_priority_term->name,
          'description' => $regular_priority_term->description,
          'format' => isset($regular_priority_term->format) ? $regular_priority_term->format : NULL,
          'weight' => $regular_priority_term->weight,
          'vocabulary_machine_name' => $priority_vocab->machine_name,
        )
      ),
    ),
    'field_identifiers' => array(
      'field_name' => 'field_identifiers',
      'entity_type' => 'node',
      'bundle' => 'workflow_batch',
      'required' => 0,
      'description' => t('This should not be edited manually.  The system populates ' .
        'this by parsing the batch\'s uploaded CSV file.'),
      'label' => 'Identifiers',
      'widget' => array(
        'weight' => 5,
        'type' => 'text_textarea',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'rows' => 5,
        ),
      ),
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => 2,
          'settings' => array(),
          'module' => 'text',
        ),
        'full' => array(
          'label' => 'above',
          'type' => 'text_default',
          'weight' => 5,
          'settings' => array(),
          'module' => 'text',
        ),
      ),
      'default_value' => '',
    ),
  );
}

/**
 * Returns the fields needed to create the View object.
 */
function _islandora_digital_workflow_installed_fields() {
  return array(
    'field_pid_count' => array(
      'field_name' => 'field_pid_count',
      'type' => 'number_integer',
      'entity_types' => array('node'),
      'module' => 'number',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(),
        'storage' => array(
          'type' => 'field_sql_storage',
          'module' => 'field_sql_storage',
          'active' => 1,
          'details' => array(
            'sql' => array(
              'FIELD_LOAD_CURRENT' => array(
                'field_data_field_pid_count' => array('value' => 'field_pid_count_value'),
              ),
              'FIELD_LOAD_REVISION' => array(
                'field_revision_field_pid_count' => array('value' => 'field_pid_count_value'),
              ),
            ),
          ),
        ),
      ),
    ),
    'field_batch_name' => array(
      'field_name' => 'field_batch_name',
      'type' => 'text',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array('max_length' => 255),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_batch_name' => array(
                'value' => 'field_batch_name_value',
                'format' => 'field_batch_name_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_batch_name' => array(
                'value' => 'field_batch_name_value',
                'format' => 'field_batch_name_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array('format' => 'format',),
        ),
      ),
      'indexes' => array(
        'format' => array('0' => 'format',),
      ),
    ),
    'field_collections_mapping' => array(
      'field_name' => 'field_collections_mapping',
      'type' => 'text',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array('max_length' => 255),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_collections_mapping' => array(
                'value' => 'field_collections_mapping_value',
                'format' => 'field_collections_mapping_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_collections_mapping' => array(
                'value' => 'field_collections_mapping_value',
                'format' => 'field_collections_mapping_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array('format' => 'format',),
        ),
      ),
      'indexes' => array(
        'format' => array('0' => 'format',),
      ),
    ),
    'field_sites_mapping' => array(
      'field_name' => 'field_sites_mapping',
      'type' => 'text',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array('max_length' => 255,),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_sites_mapping' => array(
                'value' => 'field_sites_mapping_value',
                'format' => 'field_sites_mapping_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_sites_mapping' => array(
                'value' => 'field_sites_mapping_value',
                'format' => 'field_sites_mapping_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array('format' => 'format',),
        ),
      ),
      'indexes' => array(
        'format' => array('0' => 'format',),
      ),
    ),
    'field_batch_defaults' => array(
      'field_name' => 'field_batch_defaults',
      'type' => 'text_long',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_batch_defaults' => array(
                'value' => 'field_batch_defaults_value',
                'format' => 'field_batch_defaults_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_batch_defaults' => array(
                'value' => 'field_batch_defaults_value',
                'format' => 'field_batch_defaults_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array('format' => 'format'),
        ),
      ),
      'indexes' => array(
        'format' => array('0' => 'format',),
      ),
    ),
    'field_stage' => array(
      'field_name' => 'field_stage',
      'type' => 'taxonomy_term_reference',
      'entity_types' => array(),
      'module' => 'taxonomy',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => -1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'allowed_values' => array(
          '0' => array(
            'vocabulary' => 'workflow_stage_vocab',
            'parent' => 0,
          ),
        ),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_stage' => array('tid' => 'field_stage_tid',),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_stage' => array('tid' => 'field_stage_tid',),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'tid' => array(
          'table' => 'taxonomy_term_data',
          'columns' => array('tid' => 'tid',),
        ),
      ),
      'indexes' => array(
        'tid' => array('0' => 'tid',),
      ),
    ),
    'field_islandora_model' => array(
      'field_name' => 'field_islandora_model',
      'type' => 'taxonomy_term_reference',
      'entity_types' => array(),
      'module' => 'taxonomy',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'allowed_values' => array(
          '0' => array(
            'vocabulary' => 'workflow_content_type_vocab',
            'parent' => 0,
          ),
        ),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_islandora_model' => array('tid' => 'field_islandora_model_tid',),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_islandora_model' => array('tid' => 'field_islandora_model_tid',),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'tid' => array(
          'table' => 'taxonomy_term_data',
          'columns' => array('tid' => 'tid',),
        ),
      ),
      'indexes' => array(
        'tid' => array('0' => 'tid',),
      ),
    ),
    'field_priority' => array(
      'field_name' => 'field_priority',
      'type' => 'taxonomy_term_reference',
      'entity_types' => array(),
      'module' => 'taxonomy',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'allowed_values' => array(
          '0' => array(
            'vocabulary' => 'workflow_batch_priority_vocab',
            'parent' => 0,
          ),
        ),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_priority' => array('tid' => 'field_priority_tid',),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_priority' => array('tid' => 'field_priority_tid',),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'tid' => array(
          'table' => 'taxonomy_term_data',
          'columns' => array('tid' => 'tid',),
        ),
      ),
      'indexes' => array(
        'tid' => array('0' => 'tid',),
      ),
    ),
    'field_identifiers' => array(
      'field_name' => 'field_identifiers',
      'type' => 'text_long',
      'entity_types' => array('node'),
      'module' => 'text',
      'active' => 1,
      'storage_type' => 'field_sql_storage',
      'storage_module' => 'field_sql_storage',
      'storage_active' => 1,
      'locked' => 0,
      'cardinality' => 1,
      'translatable' => 0,
      'deleted' => 0,
      'settings' => array(
        'translatable' => 0,
        'entity_types' => array(),
        'settings' => array(),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => 1,
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_identifiers' => array(
                'value' => 'field_identifiers_value',
                'format' => 'field_identifiers_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_identifiers' => array(
                'value' => 'field_identifiers_value',
                'format' => 'field_identifiers_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array('format' => 'format',),
        ),
      ),
      'indexes' => array(
        'format' => array('0' => 'format',),
      ),
    ),
  );
}

<?php

/**
 * @file
 * Module code for Islandora Digital Workflow module.
 */

// Taxonomy Vocabulary
define('IDW_STAGE_TAXONOMY_MACHINE_NAME', 'workflow_stage_vocab');
define('IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME', 'workflow_content_type_vocab');

// action constants
define('IDW_ACTION_CHECK_IN', 1);
define('IDW_ACTION_SCAN', 2);
define('IDW_ACTION_SYSTEM_INGEST', 3);
define('IDW_ACTION_CHECK_OUT', 4);
define('IDW_ACTION_RESCANNED', 5);
define('IDW_ACTION_CHECK_PHYSICAL_ITEMS', 6);
define('IDW_ACTION_SYSTEM_MADE_DERIVATIVES', 7);
define('IDW_ACTION_ADD_MARC_RECORD', 8);
define('IDW_ACTION_PROBLEM', 9);
define('IDW_ACTION_ADD_MODS_RECORD', 10);
define('IDW_ACTION_ALL_CHECK_IN', 1001);
define('IDW_ACTION_ALL_SCAN', 1002);
define('IDW_ACTION_ALL_SYSTEM_INGEST', 1003);
define('IDW_ACTION_ALL_CHECK_OUT', 1004);
define('IDW_ACTION_ALL_CHECK_PHYSICAL_ITEMS', 1005);

// Permissions -- NOTE: there are additional permission constants defined in
// islandora_digital_workflow_permission that use the naming convention of
// 'ISLANDORA_DIGITAL_WORKFLOW_' . strtoupper($model_name) - for which a helper
// in includes/access_permissions.inc named
// islandora_digital_workflow_permission_name_of_model() will do.
define('ISLANDORA_DIGITAL_WORKFLOW', 'digital workflow access');
define('ISLANDORA_DIGITAL_WORKFLOW_MANAGE', 'digital workflow manage');
define('ISLANDORA_DIGITAL_WORKFLOW_CREATE_NEW_BATCH', 'digital workflow create batches');
define('ISLANDORA_DIGITAL_WORKFLOW_VIEW_TRANSACTIONS', 'digital workflow view transactions');
define('ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS', 'digital workflow edit transactions');
define('ISLANDORA_DIGITAL_WORKFLOW_UPDATE_ITEMS', 'digital workflow update items');
define('ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS', 'digital workflow ingest items');
define('ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES', 'digital workflow manage sequences');
define('ISLANDORA_DIGITAL_WORKFLOW_RUN_REPORTS', 'digital workflow run reports');
define('ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES', 'digital workflow use utilities');
define('ISLANDORA_DIGITAL_WORKFLOW_SYNC_STAGING', 'digital workflow sync staging');

/**
 * Implements hook_menu().
 */
function islandora_digital_workflow_menu() {
  // the "admin user" (usually ISLANDORA_DIGITAL_WORKFLOW) menu handlers:
  return array(
    'admin/islandora/islandora_digital_workflow' => array(
      'title' => t('Islandora Digital Workflow'),
      'description' => 'Settings for the Islandora Digital Workflow module.',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_admin_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/admin.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequences' => array(
      'title' => t('Islandora Digital Workflow - Workflow Sequences'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_sequences'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequences/%' => array(
      'title' => t('Islandora Digital Workflow - Workflow Sequences'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_actions_form', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/create_workflow_sequence' => array(
      'title' => t('Islandora Digital Workflow - Create Workflow Sequence'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_create'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/edit_workflow_sequence/%' => array(
      'title' => t('Islandora Digital Workflow - Edit Workflow Sequence'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_edit', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/delete_workflow_sequence/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Workflow Sequence'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_delete', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_models/%' => array(
      'title' => t('Islandora Digital Workflow - Workflow Sequence Model Associations'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_models_form', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions' => array(
      'title' => t('Islandora Digital Workflow - Actions Configuration'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions/edit/%' => array(
      'title' => t('Islandora Digital Workflow - Actions Configuration'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_edit_form', 5),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions/delete/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Action'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_delete_form', 5),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions/add' => array(
      'title' => t('Islandora Digital Workflow - Add New Action'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_add_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),

    // the "standard Workflow user" (usually ISLANDORA_DIGITAL_WORKFLOW) menu handlers:
    'islandora/islandora_digital_workflow' => array(
      'title' => t('Islandora Digital Workflow Dashboard'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_dashboard'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/dashboard.form.inc',
    ),
    // Lookup form
    'islandora/islandora_digital_workflow/lookup' => array(
      'page callback' => array('islandora_digital_workflow_lookup'),
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/lookup.form.inc',
    ),
    // Lookup submit handler - performs search, redirects if finds only one
    // result, else displays the lookup results.
    'islandora/islandora_digital_workflow/lookup/%' => array(
      'title' => t('Islandora Digital Workflow Search'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_lookup_form_submitted'),
      'page arguments' => array(3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/lookup.form.inc',
    ),
    'islandora/islandora_digital_workflow/create_batch' => array(
      'title' => t('Islandora Digital Workflow - Create Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_create_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_CREATE_NEW_BATCH),
      'file' => 'includes/create_batch.form.inc',
    ),
    'islandora/islandora_digital_workflow/edit_batch/%' => array(
      'title' => t('Islandora Digital Workflow - Edit Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_create_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/create_batch.form.inc',
    ),
    'islandora/islandora_digital_workflow/delete_batch/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_delete_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/delete_batch.form.inc',
    ),
    'islandora/islandora_digital_workflow/ingest_item/%' => array(
      'title' => t('Islandora Digital Workflow Ingest Item'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_ingest_item'),
      'page arguments' => array(3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS),
      'file' => 'includes/ingest_item.form.inc',
    ),
    // Node enhancement functions
    'node/%node/batch' => array(
      'title' => t('Edit Batch Record'),
      'page callback' => 'islandora_digital_workflow_batch',
      'page arguments' => array(1),
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/batch.form.inc',
      'weight' => 89,
    ),
    'node/%node/files' => array(
      'title' => t('Batch Files'),
      'page callback' => 'islandora_digital_workflow_files',
      'page arguments' => array(1),
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/files.form.inc',
      'weight' => 90,
    ),
    'node/%node/items' => array(
      'title' => t('Batch Items'),
      // arguments are handled in islandora_digital_workflow_batch_items
      // with arg(1).
      'page callback' => 'islandora_digital_workflow_batch_items',
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/items.form.inc',
      'weight' => 90,
    ),
    'node/%node/item/%' => array(
      'title' => t('Batch Item'),
      'page callback' => 'islandora_digital_workflow_items_view_item',
      'page arguments' => array(1, 3),
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'file' => 'includes/item.form.inc',
      'weight' => 90,
    ),
    'node/%node/transactions' => array(
      'title' => t('Batch Transactions'),
      'page callback' => 'islandora_digital_workflow_batch_transactions',
      // arguments are handled with arg(1).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_VIEW_TRANSACTIONS, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/transactions.form.inc',
      'weight' => 90,
    ),
    'node/%node/add_transaction/%/%' => array(
      'title' => t('Add Transaction'),
      'page callback' => 'islandora_digital_workflow_add_transaction',
      // arguments are handled with arg(1), arg(3), and arg(4).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS, 1),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/add_transaction.form.inc',
      'weight' => 90,
    ),
    'node/%node/delete_transaction/%' => array(
      'title' => t('Delete Transaction'),
      'page callback' => 'islandora_digital_workflow_delete_transaction',
      // arguments are handled with arg(1) and arg(3).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS, 1),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/delete_transaction.form.inc',
      'weight' => 90,
    ),
    'node/%node/edit_transaction/%' => array(
      'title' => t('Edit Transaction'),
      'page callback' => 'islandora_digital_workflow_edit_transaction',
      // arguments are handled with arg(1) and arg(3).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS, 1),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/edit_transaction.form.inc',
      'weight' => 90,
    ),
    'node/%node/sync_batch_items' => array(
      'title' => t('Sync Batch Items'),
      'page callback' => 'islandora_digital_workflow_sync_batch_items',
      // arguments are handled with arg(1).
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS),
      'type' => MENU_SUGGESTED_ITEM,
      'file' => 'includes/create_batch.form.inc',
      'weight' => 90,
    ),
    'islandora/islandora_digital_workflow/sync_staging_files/%' => array(
      'title' => t('Islandora Digital Workflow - Sync staging files'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'islandora_digital_workflow_sync_staging_files',
      // arguments are handled with arg(3)
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_SYNC_STAGING),
      'file' => 'includes/sync_staging_files.inc',
    ),
    'islandora/islandora_digital_workflow/reports' => array(
      'title' => t('Islandora Digital Workflow - Reports'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_reports'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_RUN_REPORTS),
      'file' => 'includes/reports.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities' => array(
      'title' => t('Islandora Digital Workflow - Utilities'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_utilities_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/utilities.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities/process_form' => array(
      'title' => t('Islandora Digital Workflow - Process Identifiers'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_process_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/process.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities/recalculate_files' => array(
      'title' => t('Islandora Digital Workflow - Process Identifiers'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_recalculate_files'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/utilities.form.inc',
    ),
    // Callback to serve up the dynamically generated CSS file
    'islandora/islandora_digital_workflow_css.css' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'islandora_digital_workflow_update_dynamic_css',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/islandora_digital_workflow_css.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_digital_workflow_permission() {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_digital_workflow', 'includes/access_permissions');
  $static_permissions = array(
    ISLANDORA_DIGITAL_WORKFLOW => array(
      'title' => t('Use the Islandora Digital Workflow system.'),
      'description' => t('User can access and use the Islandora Digital Workflow system.'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_MANAGE => array(
      'title' => t('Manage Workflow'),
      'description' => t('User can manage the Islandora Digital Workflow configuration settings'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_CREATE_NEW_BATCH => array(
      'title' => t('Create new digital workflow batches.'),
      'description' => t('User can create new batches within the Islandora Digital Workflow system.'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_VIEW_TRANSACTIONS => array(
      'title' => t('View Batch Transactions'),
      'description' => t('User can view batch transaction details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS => array(
      'title' => t('Edit / Delete Batch Transactions'),
      'description' => t('User can edit / delete batch transaction details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_UPDATE_ITEMS => array(
      'title' => t('Update Batch Items'),
      'description' => t('User can update batch items details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS => array(
      'title' => t('Ingest Batch Items'),
      'description' => t('User can ingest the fedora objects for batch items'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES => array(
      'title' => t('Manage Workflow Sequences'),
      'description' => t('User can manage workflow sequences and required actions'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_RUN_REPORTS => array(
      'title' => t('Run reports'),
      'description' => t('User can run and view reports on batches and items'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES => array(
      'title' => t('Use batch and items utilities forms'),
      'description' => t('User can use batch and item utilities forms'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_SYNC_STAGING => array(
      'title' => t('User can "Sync" files from Staging to workflow'),
      'description' => t('User can use the "Sync" function to bring the resolved files from Staging location back to workflow'),
    ),
  );
  $model_based_permissions = array();
  $models = islandora_digital_workflow_get_reduced_readable_cmodels();

  foreach ($models as $cmodel => $model) {
    $permission_define_name = islandora_digital_workflow_permission_constant_name_of_model($cmodel);
    $permission = islandora_digital_workflow_permission_of_model($cmodel);
    if (!defined($permission_define_name)) {
      define($permission_define_name, $permission);
    }
    $model_based_permissions[$permission] = array(
      'title' => 'Create/Edit/Update ' . $model . ' batches',
      'description' => 'User can perform tasks related to the ' . $model . ' objects within the Islandora Digital Workflow system',
    );
  }
  return array_merge($static_permissions, $model_based_permissions);
}

/**
 * Implements hook_preprocess_theme().
 *
 * This code will remove the sidebar and must check to see whether or not the path is on a user page.
 */
function islandora_digital_workflow_preprocess_html(&$vars) {
  $item = menu_get_item();
  if (is_array($item)) {
    $path = drupal_get_path('module', 'islandora_digital_workflow');
    module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
    if (islandora_digital_workflow_path_needs_js($item['path'])) {
      drupal_add_js($path . '/js/digital_workflow.js');
    }
    drupal_add_css($path . '/css/islandora_digital_workflow.css');
    $public_files_path = drupal_realpath('public://');
    $base_public_files_path = substr(str_replace(realpath("."), "", $public_files_path), 1);
    islandora_digital_workflow_ensure_dynamic_css_copied($path, $public_files_path);
    drupal_add_css($base_public_files_path . '/islandora_digital_workflow_dynamic.css');
  }
}

/**
 * This function will create and save the dynamic CSS only if it does not exist.
 */
function islandora_digital_workflow_ensure_dynamic_css_copied($path, $public_files_path) {
  if (!file_exists($public_files_path . '/islandora_digital_workflow_dynamic.css')) {
    // Generate and copy the CSS that is based on the configuration.
    module_load_include('inc', 'islandora_digital_workflow', 'includes/islandora_digital_workflow_css');
    islandora_digital_workflow_update_dynamic_css();
  }
}

/**
 * Implements hook_theme()
 */
function islandora_digital_workflow_theme() {
  return array(
    'islandora_digital_workflow_dashboard' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-digital-workflow-dashboard',
      'variables' => array(
        'dashboard_data' => NULL,
        'links' => array(),
      ),
    ),
    'islandora_digital_workflow_batch_defaults' => array(
      'template' => 'theme/islandora-digital-workflow-batch-defaults',
      'variables' => array(
        'islandora_digital_workflow_batch' => NULL,
      ),
    ),
    'islandora_digital_workflow_lookup' => array(
      'template' => 'theme/islandora-digital-workflow-findobject-form',
      'variables' => array(
        'searchterm' => NULL,
      )
    ),
    'islandora_digital_workflow_lookup_results' => array(
      'template' => 'theme/islandora-digital-workflow-lookup-results',
      'variables' => array(
        'batch_records' => array(),
        'results_count' => 0,
        'searchterm' => NULL,
        'matched_csv_only' => FALSE,
      ),
    ),
    'islandora_digital_workflow_files' => array(
      'template' => 'theme/islandora-digital-workflow-files',
      'variables' => array(
        'batch_record' => array(),
        'batch_path' => '',
        'item_file_records' => array(),
        'found_files' => array(),
        'table_title' => '',
        'node' => NULL,
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_item' => array(
      'template' => 'theme/islandora-digital-workflow-item',
      'variables' => array(
        'batch_record' => array(),
        'item' => array(),
        'is_paged_content' => FALSE,
        'workflow_sequence_text' => '',
        'can_update' => FALSE,
        'previous_problems' => array(),
        'unresolved_problems' => array(),
        'item_record_transactions' => array(),
        'pid' => '',
        'can_ingest' => FALSE,
        'ingested_links' => '',
        'found_files' => array(),
        'max_timestamp_and_how_long_ago' => array(),
        'workflow_sequences' => array(),
      ),
    ),
    'islandora_digital_workflow_dashboard_tasks' => array(
      'template' => 'theme/islandora-digital-workflow-dashboard-tasks',
      'variables' => array(
        'tasks_tables' => array(),
      ),
    ),
    'islandora_digital_workflow_batch_records_table' => array(
      'template' => 'theme/islandora-digital-workflow-batch-records-table',
      'variables' => array(
        'batch_records' => array(),
        'table_title' => '',
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_transactions' => array(
      'template' => 'theme/islandora-digital-workflow-transactions',
      'variables' => array(
        'batch_record' => array(),
        'transaction_records' => array(),
        'table_title' => '',
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_transactions_glyphs' => array(
      'template' => 'theme/islandora-digital-workflow-transactions-glyphs',
      'variables' => array(
        'transaction_actions' => array(),
        'display_as_requirements' => FALSE,
        'display_actions_key' => FALSE,
        'sequence_name' => '',
      ),
    ),
    'islandora_digital_workflow_workflow_sequence_actions_form' => array(
      'render element' => 'form',
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'islandora_digital_workflow_action_glyph_preview' => array(
      'template' => 'theme/islandora-digital-workflow-action-glyph-preview',
      'variables' => array(
        'glyph_filenames' => array(),
        'module_path' => '',
        'selected' => '',
        'normal_size' => TRUE,
      ),
    ),
    'islandora_digital_workflow_rounded_box' => array(
      'template' => 'theme/islandora-digital-workflow-rounded-box',
      'variables' => array(
        'title' => '',
        'contents' => '',
      ),
    ),
    'islandora_digital_workflow_simple_markup' => array(
      'variables' => array('markup' => ''),
      'template' => 'theme/islandora-digital-workflow-markup',
    ),
    'islandora_digital_workflow_dynamic_css' => array(
      'template' => 'theme/islandora-digital-workflow-dynamic-css',
      'variables' => array(
        'title' => '',
        'contents' => '',
      ),
    ),
    'islandora_digital_workflow_files_table' => array(
      'template' => 'theme/islandora-digital-workflow-files-table',
      'variables' => array(
        'folders' => '',
        'root' => '',
        'action_link' => '',
        'show_message_status' => FALSE,
        'table_title' => '',
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_admin_workflow_sequence' => array(
      'template' => 'theme/islandora-digital-workflow-admin-workflow-sequence',
      'variables' => array(
        'workflow_sequence_id' => '',
        'sequence_name' => '',
        'markup_batch_actions' => array(),
        'markup_item_actions' => array(),
        'is_mixed' => 0,
        'sequence_models' => array(),
        'models' => '',
        'sequence_in_use' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * This will check the workflow database to insert a transaction record for it.
 * This hook is not to be confused with the one for datastreams.
 *
 * @param AbstractObject $object
 *   The object that was just ingested.
 */
function islandora_digital_workflow_islandora_object_ingested(AbstractObject $object) {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
  $pid = $object->id;
  @list($ns, $identifier) = explode(":", $pid, 2);
  if ($identifier) {
    $batch_ids = islandora_digital_workflow_get_batch_record_by_items_identifier($identifier);
    if (is_array($batch_ids) && array_key_exists(0, $batch_ids) && is_object($batch_ids[0])) {
      $batch_id_obj = $batch_ids[0];
      islandora_digital_workflow_insert_transactions_record(IDW_ACTION_SYSTEM_INGEST, $batch_id_obj->batch_id, NULL);
    }
  }
}

/**
 * Implements hook_islandora_datastream_ingested().
 *
 * This will need to inspect the object to see whether or not ALL required
 * derivatives for this model have been created -- if so, it will create a
 * transaction record for "system-made-derivatives" for the underlying batch_item.
 *
 * @param AbstractObject $object
 * @param AbstractDatastream $datastream
 */
function islandora_digital_workflow_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  $applicable_paged_content_cmodels = islandora_digital_workflow_retrieve_applicable_paged_content_cmodels();
  $object->models;
  $object_datastreams = $required_datastreams = array();
  foreach ($object as $datatream) {
    $object_datastreams[strtoupper($datastream->id)] = strtoupper($datastream->id);
  }
  foreach ($object->models as $model_pid) {
    if ($model_pid <> 'fedora-system:FedoraObject-3.0') {
      if (array_key_exists($model_pid, $required_datastreams) === FALSE) {
        $model = @islandora_object_load($model_pid);
        if (isset($model) && $model) {
          $model_pids[] = $model_pid;
          $ds_reqs = islandora_get_datastreams_requirements_from_content_model($model);
          // ONLY want to check the required derivatives here.
          foreach ($ds_reqs as $ds_req_dsid => $ds_req) {
            if (array_key_exists('optional', $ds_req) && $ds_req['optional']) {
              $required_datastreams[] = strtoupper($ds_req_dsid);
            }
          }
        }
      }
    }
  }
  // Loop through the $required_datastreams, assume TRUE - set to FALSE if any
  // not found in $object_datastreams
  $success = TRUE;
  $required_datastream_index = 0;
  while ($success && $required_datastream_index < count($required_datastreams)) {
    $dsid = $required_datastreams[$required_datastream_index];
    $success |= (array_key_exists($dsid, $object_datastreams));
    $required_datastream_index++;
  }
  // if $success is still TRUE, all derivatives have been created according to
  // the object model's requirements.
  if ($success) {
    module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
    $pid = $object->id;
    @list($ns, $identifier) = explode(":", $pid, 2);
    $batch_item_arr = islandora_digital_workflow_get_batch_item_record_by_identifier($identifier);
    islandora_digital_workflow_insert_transactions_record(IDW_ACTION_SYSTEM_MADE_DERIVATIVES, NULL, $batch_item_arr['batch_item_id']);
  }
}

/**
 * Hook for hook_node_update.
 *
 * To display all of the related islandora_digital_workflow_batch record's
 * values on the Node page, this code will update the field_batch_defaults
 * field with the values from the batch record so that all of those do not
 * need to be CCK fields.
 */
function islandora_digital_workflow_node_update($node) {
  global $system_creating_nodes;
  if (!$system_creating_nodes) {
    module_load_include('inc', 'islandora_digital_workflow', 'includes/node-utilities');
    islandora_digital_workflow_sync_node_batch_record_info($node, array(), '', FALSE);
  }
}

/**
 * Checks whether the node is a workflow_batch - and potentially whether or not
 * the user has access to this permission.
 *
 * @param string $permission
 *   Name of the permission to check.
 * @param object $node
 *   Drupal node
 * @return boolean
 *   Whether or not the user has access to the node view.
 */
function islandora_digital_workflow_access_node($permission, $node) {
  if ($node->type <> 'workflow_batch') {
    return FALSE;
  }
  else {
    return user_access($permission);
  }
}

/**
 * Implementation of hook_views_api().
 */
function islandora_digital_workflow_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'islandora_digital_workflow'),
  );
}

/**
 * Theme function to display order_manage objects.
 *
 * These rows are draggable and need to be themed in this way (from what I read).
 *
 * @param array $variables
 *   Drupal template variables.
 * @return string
 *   Markup of the themed order_manage object
 */
function theme_islandora_digital_workflow_workflow_sequence_actions_form($variables) {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
  $form = $variables['form'];
  $sequence_id = 9999;
  $rows = array();
  foreach (element_children($form['wrapper']['rows']) as $action_id) {
    $action_record = islandora_digital_workflow_get_action($action_id);
    $form['wrapper']['rows'][$action_id]['weight']['#attributes']['class'] = array('rows-order-weight');
    $sequence_id = $form['wrapper']['rows'][$action_id]['workflow_sequence_id']['#value'];

    $classes = array('draggable');
    $classes[] = (islandora_digital_workflow_is_batch_action($action_record)) ? 'batch_action' : 'item_action';
    // One final class pertains to the action name - to distinguish elements in the CSS.
    @list($keep, $junk) = explode(" [", $form['wrapper']['rows'][$action_id]['action_name']['#default_value']);
    $classes[] = 'transaction_action_' . strtolower(str_replace(array("-", " "), "_", $keep));
    $rows[] = array(
      'data' => array(
        array('class' => array('slide-cross')),
        drupal_render($form['wrapper']['rows'][$action_id]['action_id']),
        drupal_render($form['wrapper']['rows'][$action_id]['action_description']),
        drupal_render($form['wrapper']['rows'][$action_id]['is_required']),
        drupal_render($form['wrapper']['rows'][$action_id]['is_system_action']),
        drupal_render($form['wrapper']['rows'][$action_id]['weight']),
        drupal_render($form['wrapper']['rows'][$action_id]['op']),
      ),
      'class' => $classes,
    );
  }

  $header = array('', '', t('Action (If empty, title is used)'), t('Required?'), t('System Action?'), t('Weight'), t('Operations'));
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'rows-order-' . $sequence_id)));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag('rows-order-' . $sequence_id, 'order', 'sibling', 'rows-order-weight', NULL, NULL, FALSE);

  return $output;
}

/**
 * Implements hook_islandora_batch_process_finished().
 *
 * Sets the appropriate action on the objects that have been ingested.
 */
function islandora_digital_workflow_islandora_batch_process_finished($sets) {
  // Look at the object - and delete the related temporary files that were needed for this object.
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_batch', 'includes/db');

  if (!empty($sets)) {
    foreach ($sets as $set) {
      // Delete set and associated queued items.
      $queued_items = islandora_batch_get_queued_items_for_set($set);

      foreach ($queued_items as $ingested_pid) {
        // ingested_pid = ' . print_r($ingested_pid, true)
        $ingested_object = islandora_object_load($ingested_pid);
        if (is_object($ingested_object)) {
          // Update the batch status record for the matching batch record for this set's $ingested_pid
          islandora_digital_workflow_set_status_for_pid($ingested_object, UPITT_WORKFLOW_ACTION_INGESTED_COMPLETELY, TRUE);
        }
        else {
          $variables = array('@ingested_pid' => $ingested_pid, '@set' => $set);
          watchdog('islandora_digital_workflow', 'Set refers to an object by PID "@ingested_pid" that no longer exists, ' .
              'and can not execute the batch_process_finished routine for this set @set.', $variables, WATCHDOG_NOTICE);
        } // if (is_object($ingested_object)
      } //  foreach ($queued_items
    } // foreach ($sets
  } // if (!empty($sets
}

function islandora_digital_workflow_preprocess_page(&$vars) {
  if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
    $node = node_load(arg(1));
    if ( $node->type == 'workflow_batch' ) {
      // islandora/islandora_digital_workflow » {current node title}
      $title = (arg(2) == 'item' && is_numeric(arg(3))) ?
              l($node->title, 'node/' . arg(1) . '/batch') : $node->title;
      $vars['breadcrumb'] = theme('breadcrumb', array(
          'breadcrumb' => array(
              l('Islandora Digital Workflow', 'islandora/islandora_digital_workflow'),
              $title,
          ))
      );
    }
  }
}
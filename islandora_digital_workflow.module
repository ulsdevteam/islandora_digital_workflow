<?php

/**
 * @file
 * Module code for Islandora Digital Workflow module.
 */

// Taxonomy Vocabulary.
define('IDW_STAGE_TAXONOMY_MACHINE_NAME', 'workflow_stage_vocab');
define('IDW_CONTENT_TYPE_TAXONOMY_MACHINE_NAME', 'workflow_content_type_vocab');
define('IDW_BATCH_PRIORITY_TAXONOMY_MACHINE_NAME', 'workflow_batch_priority_vocab');

// Action constants.
define('IDW_ACTION_CHECK_IN', 1);
define('IDW_ACTION_SCAN', 2);
define('IDW_ACTION_SYSTEM_INGESTED', 3);
define('IDW_ACTION_CHECK_OUT', 4);
define('IDW_ACTION_RESCANNED', 5);
// define('IDW_ACTION_CHECK_PHYSICAL_ITEMS', 6);
define('IDW_ACTION_SYSTEM_MADE_DERIVATIVES', 7);
define('IDW_ACTION_ADD_MARC_RECORD', 8);
define('IDW_ACTION_PROBLEM', 9);
define('IDW_ACTION_MODS_RECORD_UPDATED', 10);
define('IDW_ACTION_MODS_RECORD_COMPLETED', 11);
define('IDW_ACTION_METADATA_PASS_QC', 12);
define('IDW_ACTION_METADATA_FAIL_QC', 13);
define('IDW_PUBLISH_OBJECT', 14);
define('IDW_ACTION_USER_INGEST', 15);
define('IDW_ACTION_METS_CREATED', 16);
define('IDW_BATCH_ACTION_INACTIVE', 1001);

// Permissions -- NOTE: there are additional permission constants defined in
// islandora_digital_workflow_permission that use the naming convention of
// 'ISLANDORA_DIGITAL_WORKFLOW_' . strtoupper($model_name) - for which a helper
// in includes/access_permissions.inc named
// islandora_digital_workflow_permission_name_of_model() will do.
define('ISLANDORA_DIGITAL_WORKFLOW', 'digital workflow access');
define('ISLANDORA_DIGITAL_WORKFLOW_MANAGE', 'digital workflow manage');
define('ISLANDORA_DIGITAL_WORKFLOW_CREATE_NEW_BATCH', 'digital workflow create batches');
if (module_exists('islandora_digitization_requests')) {
  define('ISLANDORA_DIGITAL_WORKFLOW_CREATE_DIGITIZATION_REQUEST', 'digital workflow create digitization request');
}
define('ISLANDORA_DIGITAL_WORKFLOW_VIEW_TRANSACTIONS', 'digital workflow view transactions');
define('ISLANDORA_DIGITAL_WORKFLOW_EDIT_ITEM_META', 'digital workflow edit item meta');
define('ISLANDORA_DIGITAL_WORKFLOW_DELETE_ITEMS', 'digital workflow delete items');
define('ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS', 'digital workflow edit transactions');
define('ISLANDORA_DIGITAL_WORKFLOW_UPDATE_ITEMS', 'digital workflow update items');
define('ISLANDORA_DIGITAL_WORKFLOW_DASHBOARD_VIEW_PROBLEMS', 'digital workflow dashboard view problems');
define('ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS', 'digital workflow ingest items');
define('ISLANDORA_DIGITAL_WORKFLOW_PUBLISH_ITEMS', 'digital workflow publish items');
define('ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES', 'digital workflow manage sequences');
define('ISLANDORA_DIGITAL_WORKFLOW_VIEW_EXTRA_INFO', 'digital workflow view extra info');
define('ISLANDORA_DIGITAL_WORKFLOW_RUN_REPORTS', 'digital workflow run reports');
define('ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES', 'digital workflow use utilities');
define('ISLANDORA_DIGITAL_WORKFLOW_SYNC_DELIVERY', 'digital workflow sync delivery');

/**
 * Implements hook_menu().
 */
function islandora_digital_workflow_menu() {
  // the "admin user" (usually ISLANDORA_DIGITAL_WORKFLOW) menu handlers:
  $menu = array(
    'admin/islandora/islandora_digital_workflow' => array(
      'title' => t('Islandora Digital Workflow'),
      'description' => 'Settings for the Islandora Digital Workflow module.',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_admin_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE),
      'file' => 'includes/admin.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequences' => array(
      'title' => t('Islandora Digital Workflow - Workflow Sequences'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_sequences'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequences/%' => array(
      'title' => t('Islandora Digital Workflow - Workflow Sequences'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_actions_form', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/create_workflow_sequence' => array(
      'title' => t('Islandora Digital Workflow - Create Workflow Sequence'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_create'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/edit_workflow_sequence/%' => array(
      'title' => t('Islandora Digital Workflow - Edit Workflow Sequence'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_edit', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/delete_workflow_sequence/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Workflow Sequence'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_delete', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_models/%' => array(
      'title' => t('Islandora Digital Workflow - Workflow Sequence Model Associations'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_workflow_sequence_models_form', 4),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions' => array(
      'title' => t('Islandora Digital Workflow - Actions Configuration'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions/edit/%' => array(
      'title' => t('Islandora Digital Workflow - Actions Configuration'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_edit_form', 5),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions/delete/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Action'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_delete_form', 5),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'admin/islandora/islandora_digital_workflow/workflow_sequence_actions/add' => array(
      'title' => t('Islandora Digital Workflow - Add New Action'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_actions_add_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES),
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    // the "standard Workflow user" (usually ISLANDORA_DIGITAL_WORKFLOW) menu handlers.
    'islandora/islandora_digital_workflow' => array(
      'title' => t('Islandora Digital Workflow'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_dashboard'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/dashboard.form.inc',
    ),
    // Lookup form.
    'islandora/islandora_digital_workflow/lookup' => array(
      'page callback' => array('islandora_digital_workflow_lookup'),
      'type' => MENU_SUGGESTED_ITEM,
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/lookup.form.inc',
    ),
    // Lookup submit handler - performs search, redirects if finds only one
    // result, else displays the lookup results.
    'islandora/islandora_digital_workflow/lookup/%' => array(
      'title' => t('Islandora Digital Workflow Search'),
      'type' => MENU_SUGGESTED_ITEM,
      'page callback' => array('islandora_digital_workflow_lookup_form_submitted'),
      'page arguments' => array(3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/lookup.form.inc',
    ),
    'islandora/islandora_digital_workflow/create_batch' => array(
      'title' => t('Islandora Digital Workflow - Create Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_create_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_CREATE_NEW_BATCH),
      'file' => 'includes/create_batch.form.inc',
    ),
    'islandora/islandora_digital_workflow/edit_batch/%' => array(
      'title' => t('Islandora Digital Workflow - Edit Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_create_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/create_batch.form.inc',
    ),
    'islandora/islandora_digital_workflow/delete_batch/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_delete_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_DELETE_ITEMS),
      'file' => 'includes/delete_batch.form.inc',
    ),
    'islandora/islandora_digital_workflow/delete_batch_item/%' => array(
      'title' => t('Islandora Digital Workflow - Delete Batch Items'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_delete_batch_items'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_DELETE_ITEMS),
      'file' => 'includes/delete_batch_items.form.inc',
    ),
    // A handler to serve up a download of CSV templates.
    'islandora/islandora_digital_workflow/csv_template/%' => array(
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_csv_template_download', 3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/file_utilities.inc',
    ),
    // Node enhancement functions.
    'node/%node/batch' => array(
      'title' => t('Edit Batch Record'),
      'page callback' => 'islandora_digital_workflow_batch',
      'page arguments' => array(1),
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/batch.form.inc',
      'weight' => 89,
    ),
    'node/%node/files' => array(
      'title' => t('Batch Files'),
      'page callback' => 'islandora_digital_workflow_files',
      'page arguments' => array(1),
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/files.form.inc',
      'weight' => 90,
    ),
    'node/%node/items' => array(
      'title' => t('Batch Items'),
      // arguments are handled in islandora_digital_workflow_batch_items
      // with arg(1).
      'page callback' => 'islandora_digital_workflow_batch_items',
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/items.form.inc',
      'weight' => 90,
    ),
    'node/%node/item/%' => array(
      'title' => t('Batch Item'),
      'page callback' => 'islandora_digital_workflow_items_view_item',
      'page arguments' => array(1, 3),
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW, 1),
      'file' => 'includes/item.form.inc',
      'weight' => 90,
    ),
    'node/%node/transactions' => array(
      'title' => t('Batch Transactions'),
      'page callback' => 'islandora_digital_workflow_batch_transactions',
      // arguments are handled with arg(1).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_VIEW_TRANSACTIONS, 1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/transactions.form.inc',
      'weight' => 90,
    ),
    'node/%node/add_transaction/%/%' => array(
      'title' => t('Add Transaction'),
      'page callback' => 'islandora_digital_workflow_add_transaction',
      // arguments are handled with arg(1), arg(3), and arg(4).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS, 1),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/add_transaction.form.inc',
      'weight' => 90,
    ),
    'node/%node/delete_transaction/%' => array(
      'title' => t('Delete Transaction'),
      'page callback' => 'islandora_digital_workflow_delete_transaction',
      // arguments are handled with arg(1) and arg(3).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS, 1),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/delete_transaction.form.inc',
      'weight' => 90,
    ),
    'node/%node/edit_transaction/%' => array(
      'title' => t('Edit Transaction'),
      'page callback' => 'islandora_digital_workflow_edit_transaction',
      // arguments are handled with arg(1) and arg(3).
      'access callback' => 'islandora_digital_workflow_access_node',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS, 1),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/edit_transaction.form.inc',
      'weight' => 90,
    ),
    'islandora/islandora_digital_workflow/ingest_item/%' => array(
      'title' => t('Islandora Digital Workflow - Ingest Item'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_ingest_item', 3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS),
      'file' => 'includes/ingest_item.form.inc',
    ),
    'islandora/islandora_digital_workflow/publish_item/%' => array(
      'title' => t('Islandora Digital Workflow - Publish Item'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_publish_item', 3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_PUBLISH_ITEMS),
      'file' => 'includes/publish_item.form.inc',
    ),
    'islandora/islandora_digital_workflow/ingest_all/%' => array(
      'title' => t('Islandora Digital Workflow - Ingest All Items for Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_ingest_all_batch', 3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/ingest_item.form.inc',
    ),
    'islandora/islandora_digital_workflow/publish_all/%' => array(
      'title' => t('Islandora Digital Workflow - Publish All Items for Batch'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_publish_all_batch', 3),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_PUBLISH_ITEMS),
      'file' => 'includes/publish_item.form.inc',
    ),
    'node/%node/sync_batch_items' => array(
      'title' => t('Sync Batch Items'),
      'page callback' => 'islandora_digital_workflow_sync_batch_items',
      // arguments are handled with arg(1).
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS),
      'type' => MENU_SUGGESTED_ITEM,
      'file' => 'includes/create_batch.form.inc',
      'weight' => 90,
    ),
    'islandora/islandora_digital_workflow/sync_delivery_files/%' => array(
      'title' => t('Islandora Digital Workflow - Sync Delivery files'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'islandora_digital_workflow_sync_delivery_files',
      // arguments are handled with arg(3).
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_SYNC_DELIVERY),
      'file' => 'includes/sync_delivery_files.inc',
    ),
    'islandora/islandora_digital_workflow/reports' => array(
      'title' => t('Islandora Digital Workflow - Reports'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_reports'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_RUN_REPORTS),
      'file' => 'includes/reports.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities' => array(
      'title' => t('Islandora Digital Workflow - Utilities'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_utilities_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/utilities.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities/process_form' => array(
      'title' => t('Islandora Digital Workflow - Process Identifiers'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_process_form'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/process.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities/process_set/%' => array(
      'title' => ('Process Set'),
      'page callback' => 'islandora_digital_workflow_process_set',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'file' => 'includes/process.form.inc',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
    ),
    'islandora/islandora_digital_workflow/utilities/recalculate_files' => array(
      'title' => t('Islandora Digital Workflow - Update Item Stats From Files'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_recalculate_files'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/utilities.form.inc',
    ),
    'islandora/islandora_digital_workflow/utilities/recalculate_files/%' => array(
      'title' => t('Islandora Digital Workflow - Process Identifiers'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_recalculate_files'),
      // arguments are handled with arg(4).
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES),
      'file' => 'includes/utilities.form.inc',
    ),
    // Callback to serve up the dynamically generated CSS file.
    'islandora/islandora_digital_workflow_css.css' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'islandora_digital_workflow_update_dynamic_css',
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/islandora_digital_workflow_css.inc',
    ),
    // Handler to display a given debug value.
    'islandora/islandora_digital_workflow/debug_view/%/%' => array(
      'title' => t('Islandora Digital Workflow - Debug entry viewer'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_debug_view'),
      // arguments are handled with arg(3) and arg(4).
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW),
      'file' => 'includes/item.form.inc',
    ),

    // autocomplete callback for places that need autocomplete on Islandora Models
    // that are limited to the ones supported by the digital workflow module.
    'islandora_digital_workflow/autocomplete/content-models' => array(
      'title' => 'Autocomplete callback',
      'description' => 'Autocomplete a Fedora content model PID.',
      'file' => 'includes/content_model.autocomplete.inc',
      'page callback' => 'islandora_digital_workflow_content_model_autocomplete',
      'page arguments' => array(3),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
    ),
    'islandora_digital_workflow/autocomplete/field_islandora_model/content-models' => array(
      'title' => 'Autocomplete callback',
      'description' => 'Autocomplete a Fedora content model PID.',
      'file' => 'includes/content_model.autocomplete.inc',
      'page callback' => 'islandora_digital_workflow_content_model_autocomplete',
      'page arguments' => array(3),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
    ),
  );

  if (module_exists('islandora_digitization_requests')) {
    $menu['islandora/islandora_digital_workflow/create_digitization_request'] = array(
      'title' => t('Islandora Digital Workflow - Submit a Digitization Request'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => array('islandora_digital_workflow_create_digitization_request'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_CREATE_DIGITIZATION_REQUEST),
      'file' => 'includes/create_digitization_request.form.inc',
    );
    $menu['islandora/islandora_digital_workflow/map_digitization_request_to_batch/%/%'] = array(
      'title' => t('Islandora Digital Workflow - Convert a Digitization Request into a batch?'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_digital_workflow_convert_digitization_request_to_batch'),
      'access arguments' => array(ISLANDORA_DIGITAL_WORKFLOW_CREATE_DIGITIZATION_REQUEST),
      'file' => 'includes/create_digitization_request.form.inc',
    );
  }
  return $menu;
}

/**
 * Implements hook_permission().
 */
function islandora_digital_workflow_permission() {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_digital_workflow', 'includes/access_permissions');
  $static_permissions = array(
    ISLANDORA_DIGITAL_WORKFLOW => array(
      'title' => t('Use the Islandora Digital Workflow system.'),
      'description' => t('User can access and use the Islandora Digital Workflow system.'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_MANAGE => array(
      'title' => t('Manage Workflow'),
      'description' => t('User can manage the Islandora Digital Workflow configuration settings'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_CREATE_NEW_BATCH => array(
      'title' => t('Create new digital workflow batches.'),
      'description' => t('User can create new batches within the Islandora Digital Workflow system.'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_VIEW_TRANSACTIONS => array(
      'title' => t('View Batch Transactions'),
      'description' => t('User can view batch transaction details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_EDIT_ITEM_META => array(
      'title' => t('Edit Item MODS / MARC directly'),
      'description' => t('User can edit item MODS / MARC directly from item form'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_DELETE_ITEMS => array(
      'title' => t('Delete Batches and Batch Items'),
      'description' => t('User can delete batches and individual batch items'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_EDIT_DELETE_TRANSACTIONS => array(
      'title' => t('Edit / Delete Batch Transactions'),
      'description' => t('User can edit / delete batch transaction details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_UPDATE_ITEMS => array(
      'title' => t('Update Batch Items'),
      'description' => t('User can update batch items details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_DASHBOARD_VIEW_PROBLEMS => array(
      'title' => t('View Problem Files on Dashboard'),
      'description' => t('User can update batch items details'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_INGEST_ITEMS => array(
      'title' => t('Ingest Batch Items'),
      'description' => t('User can ingest the fedora objects for batch items'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_PUBLISH_ITEMS => array(
      'title' => t('Publish Batch Items'),
      'description' => t('User can publish the fedora objects for batch items'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_MANAGE_SEQUENCES => array(
      'title' => t('Manage Workflow Sequences'),
      'description' => t('User can manage workflow sequences and required actions'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_VIEW_EXTRA_INFO => array(
      'title' => t('View extra debug info'),
      'description' => t('User will see additional debug info where it is available'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_RUN_REPORTS => array(
      'title' => t('Run reports'),
      'description' => t('User can run and view reports on batches and items'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_USE_UTILITIES => array(
      'title' => t('Use batch and items utilities forms'),
      'description' => t('User can use batch and item utilities forms'),
    ),
    ISLANDORA_DIGITAL_WORKFLOW_SYNC_DELIVERY => array(
      'title' => t('User can "Sync" files from Delivery to workflow'),
      'description' => t('User can use the "Sync" function to bring the resolved files from Delivery location back to workflow'),
    ),
  );
  if (module_exists('islandora_digitization_requests')) {
    $static_permissions[ISLANDORA_DIGITAL_WORKFLOW_CREATE_DIGITIZATION_REQUEST] = array(
      'title' => t('Create digitization requests.'),
      'description' => t('User can create a digitization request.'),
    );
  }

  $model_based_permissions = array();
  $models = islandora_digital_workflow_get_reduced_readable_cmodels();

  foreach ($models as $cmodel => $model) {
    $permission_define_name = islandora_digital_workflow_permission_constant_name_of_model($cmodel);
    $permission = islandora_digital_workflow_permission_of_model($cmodel);
    if (!defined($permission_define_name)) {
      define($permission_define_name, $permission);
    }
    $model_based_permissions[$permission] = array(
      'title' => 'Create/Edit/Update ' . $model . ' batches',
      'description' => 'User can perform tasks related to the ' . $model . ' objects within the Islandora Digital Workflow system',
    );
  }
  return array_merge($static_permissions, $model_based_permissions);
}

/**
 * Implements hook_preprocess_html().
 *
 * This code will remove the sidebar and must check to see whether or not the path is on a user page.
 */
function islandora_digital_workflow_preprocess_html(&$vars) {
  $item = menu_get_item();
  if (is_array($item)) {
    $path = drupal_get_path('module', 'islandora_digital_workflow');
    module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
    if (islandora_digital_workflow_path_needs_js($item['path'])) {
      drupal_add_js($path . '/js/digital_workflow.js');
      // Additionally, add the lookup_tooltip.js for the lookup results page.
      if ($item['path'] == 'islandora/islandora_digital_workflow/lookup/%') {
        drupal_add_js($path . '/js/lookup_tooltip.js');
      }
    } elseif ($item['path'] == 'admin/islandora/islandora_digital_workflow') {
      drupal_add_js($path . '/js/admin_digital_workflow.js');
    }
    drupal_add_css($path . '/css/islandora_digital_workflow.css');
    $public_files_path = drupal_realpath('public://');
    $base_public_files_path = substr(str_replace(realpath("."), "", $public_files_path), 1);
    islandora_digital_workflow_ensure_dynamic_css_copied($path, $public_files_path);
    drupal_add_css($base_public_files_path . '/islandora_digital_workflow_dynamic.css');
  }
}

/**
 * This function will create and save the dynamic CSS only if it does not exist.
 */
function islandora_digital_workflow_ensure_dynamic_css_copied($path, $public_files_path) {
  if (!file_exists($public_files_path . '/islandora_digital_workflow_dynamic.css')) {
    // Generate and copy the CSS that is based on the configuration.
    module_load_include('inc', 'islandora_digital_workflow', 'includes/islandora_digital_workflow_css');
    islandora_digital_workflow_update_dynamic_css();
  }
}

/**
 * Implements hook_theme()
 */
function islandora_digital_workflow_theme() {
  return array(
    'islandora_digital_workflow_dashboard' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-digital-workflow-dashboard',
      'variables' => array(
        'dashboard_data' => NULL,
        'links' => array(),
        'action_links' => array(),
      ),
    ),
    'islandora_digital_workflow_batch_defaults' => array(
      'template' => 'theme/islandora-digital-workflow-batch-defaults',
      'variables' => array(
        'batch_record' => array(),
        'schema' => array(),
      ),
    ),
    'islandora_digital_workflow_lookup' => array(
      'template' => 'theme/islandora-digital-workflow-findobject-form',
      'variables' => array(
        'searchterm' => NULL,
      )
    ),
    'islandora_digital_workflow_lookup_results' => array(
      'template' => 'theme/islandora-digital-workflow-lookup-results',
      'variables' => array(
        'records' => array(),
        'results_count' => 0,
        'secondary_results_count' => 0,
        'searchterm' => NULL,
        'reason' => '',
        'matched_csv_only' => FALSE,
      ),
    ),
    'islandora_digital_workflow_files' => array(
      'template' => 'theme/islandora-digital-workflow-files',
      'variables' => array(
        'batch_record' => array(),
        'batch_path' => '',
        'item_file_records' => array(),
        'found_files' => array(),
        'table_title' => '',
        'node' => NULL,
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_item' => array(
      'template' => 'theme/islandora-digital-workflow-item',
      'variables' => array(
        'batch_record' => array(),
        'description_markup' => '',
        'item' => array(),
        'is_paged_content' => FALSE,
        'workflow_sequence_text' => '',
        'can_update' => FALSE,
        'previous_problems' => array(),
        'unresolved_problems' => array(),
        'problem_with_scan' => FALSE,
        'problem_with_metadata' => FALSE,
        'item_record_transactions' => array(),
        'drush_log_entries' => array(),
        'pid' => '',
        'item_exists_in_other_batch' => FALSE,
        'can_ingest' => FALSE,
        'can_publish' => FALSE,
        'ingested_links' => '',
        'working_directory' => '',
        'delivery_directory' => '',
        'found_files' => array(),
        'found_delivery_files' => array(),
        'resource_select_box' => '',
        'islandora_model_select_box' => '',
        'max_timestamp_and_how_long_ago' => array(),
        'workflow_sequences' => array(),
      ),
    ),
    'islandora_digital_workflow_dashboard_tasks' => array(
      'template' => 'theme/islandora-digital-workflow-dashboard-tasks',
      'variables' => array(
        'tasks_tables' => array(),
      ),
    ),
    'islandora_digital_workflow_batch_records_table' => array(
      'template' => 'theme/islandora-digital-workflow-batch-records-table',
      'variables' => array(
        'batch_records' => array(),
        'table_title' => '',
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_transactions' => array(
      'template' => 'theme/islandora-digital-workflow-transactions',
      'variables' => array(
        'batch_record' => array(),
        'transaction_records' => array(),
        'table_title' => '',
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_transactions_glyphs' => array(
      'template' => 'theme/islandora-digital-workflow-transactions-glyphs',
      'variables' => array(
        'transaction_actions' => array(),
        'display_as_requirements' => FALSE,
        'display_actions_key' => FALSE,
        'sequence_name' => '',
      ),
    ),
    'islandora_digital_workflow_workflow_sequence_actions_form' => array(
      'render element' => 'form',
      'file' => 'includes/workflow_sequences.form.inc',
    ),
    'islandora_digital_workflow_action_glyph_preview' => array(
      'template' => 'theme/islandora-digital-workflow-action-glyph-preview',
      'variables' => array(
        'glyph_filenames' => array(),
        'module_path' => '',
        'selected' => '',
        'normal_size' => TRUE,
      ),
    ),
    'islandora_digital_workflow_messages_div' => array(
      'template' => 'theme/islandora-digital-workflow-messages-div',
      'variables' => array(
        'message_type' => '',
        'title' => '',
        'message' => '',
      ),
    ),
    'islandora_digital_workflow_rounded_box' => array(
      'template' => 'theme/islandora-digital-workflow-rounded-box',
      'variables' => array(
        'title' => '',
        'contents' => '',
      ),
    ),
    'islandora_digital_workflow_simple_markup' => array(
      'variables' => array('markup' => ''),
      'template' => 'theme/islandora-digital-workflow-markup',
    ),
    'islandora_digital_workflow_dynamic_css' => array(
      'template' => 'theme/islandora-digital-workflow-dynamic-css',
      'variables' => array(
        'title' => '',
        'contents' => '',
      ),
    ),
    'islandora_digital_workflow_files_table' => array(
      'template' => 'theme/islandora-digital-workflow-files-table',
      'variables' => array(
        'folders' => '',
        'root' => '',
        'action_link' => '',
        'show_message_status' => FALSE,
        'is_paged_content' => FALSE,
        'table_title' => '',
        'table_description' => '',
      ),
    ),
    'islandora_digital_workflow_admin_workflow_sequence' => array(
      'template' => 'theme/islandora-digital-workflow-admin-workflow-sequence',
      'variables' => array(
        'workflow_sequence_id' => '',
        'sequence_name' => '',
        'sequence_description' => '',
        'markup_batch_actions' => array(),
        'markup_item_actions' => array(),
        'is_mixed' => 0,
        'sequence_models' => array(),
        'models' => '',
        'sequence_in_use' => FALSE,
      ),
    ),
    'islandora_digital_workflow_process_set_display' => array(
      'template' => 'theme/islandora-digital-workflow-process-set-display',
      'variables' => array(
          'title' => '',
          'process_set_id' => '',
          'items' => array(),
      ),
    ),
    'islandora_digital_workflow_text_report_wrapper' => array(
      'template' => 'theme/islandora-digital-workflow-text-report-wrapper',
      'variables' => array(
          'inner_title' => '',
          'contents' => '',
          'footer' => '',
          'timestamps' => array(),
      ),
    ),
    'islandora_digital_workflow_batch_description' => array(
      'variables' => array(
        'batch_record' => array(),
        'can_ingest_all' => FALSE,
        'can_publish_all' => FALSE,
        'collection_review_links' => array(),
        'batch_mapped_from_webformsubmission' => array(),
        // This will only have a value when called from any batch item page.
        'metadata_reviewer' => '',
      ),
      'template' => 'theme/islandora-digital-workflow-batch-description',
    ),
    'islandora_digital_workflow_batch_debug_record' => array(
      'template' => 'theme/islandora-digital-workflow-debug-record',
      'variables' => array(
        'debug_record' => array(),
      ),
    ),
    // dynamically created XSL templates... only handles several MODS fieldnames:
    // depositor, genre, type_of_resource, copyright_status, publication_status,
    // and rights_holder.
    'islandora_digital_workflow_xsl_batch_defaults_to_mods' => array(
      'template' => 'theme/islandora-digital-workflow-xsl-batch-defaults-to-mods',
      'variables' => array(
        'depositor' => '',
        'genre' => '',
        'type_of_resource' => '',
        'copyright_status' => '',
        'publication_status' => '',
        'rights_holder' => '',
      ),
    ),
    'islandora_digital_workflow_item_metadata_reviewer' => array(
      'template' => 'theme/islandora-digital-workflow-item-metadata-reviewer',
      'variables' => array(
        'metadata_reviewer' => '',
        'timestamp' => '',
        'long_ago' => '',
      ),
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * This will check the workflow database to insert a transaction record for it.
 * This hook is not to be confused with the one for datastreams.
 *
 * @param AbstractObject $object
 *   The object that was just ingested.
 */
function islandora_digital_workflow_islandora_object_ingested(AbstractObject $object) {
  if (variable_get('islandora_digital_workflow_handle_islandora_hook', 0) < 1) {
    return;
  }
  if (is_object($object)) {
    module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
    module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
    $identifier = islandora_digital_workflow_get_object_identifier($object);
    if (variable_get('islandora_digital_workflow_store_workflow_history_json', 0)) {
      // Get the JSON for this item and store it as a datastream.
      // ONLY certain object types will have a corresponding item -- in other
      // words, pages will never have a workflow item.
      $object_is_an_item = TRUE;
      $page_model_names = islandora_digital_workflow_get_page_model_names();
      foreach ($object->models as $model) {
        $object_is_an_item &= (array_search($model, $page_model_names) === FALSE);
      }
      if ($object_is_an_item) {
        islandora_digital_workflow_insert_workflow_history_json($object);
      }
    }
    $batch_item_ids = islandora_digital_workflow_get_batch_item_ids_by_identifier($identifier);
    if (is_array($batch_item_ids)) {
      foreach ($batch_item_ids as $batch_item_id) {
        islandora_digital_workflow_insert_transactions_record(IDW_ACTION_SYSTEM_INGESTED, $batch_item_id, NULL, 0);
      }
    }
  }
}

/**
 * Implements hook_islandora_datastream_ingested().
 *
 * This will need to inspect the object to see whether or not ALL required
 * derivatives for this model have been created -- if so, it will create a
 * transaction record for "system-made-derivatives" for the underlying batch_item.
 *
 * @param AbstractObject $object
 * @param AbstractDatastream $datastream
 */
function islandora_digital_workflow_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  if (variable_get('islandora_digital_workflow_handle_islandora_hook', 0) < 1) {
    return;
  }
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  $applicable_paged_content_cmodels = islandora_digital_workflow_retrieve_applicable_paged_content_cmodels();
  $object->models;
  $object_datastreams = $required_datastreams = array();
  foreach ($object as $datatream) {
    $object_datastreams[strtoupper($datastream->id)] = strtoupper($datastream->id);
  }
  foreach ($object->models as $model_pid) {
    if ($model_pid <> 'fedora-system:FedoraObject-3.0') {
      if (array_key_exists($model_pid, $required_datastreams) === FALSE) {
        $model = @islandora_object_load($model_pid);
        if (isset($model) && $model) {
          $model_pids[] = $model_pid;
          $ds_reqs = islandora_get_datastreams_requirements_from_content_model($model);
          // ONLY want to check the required derivatives here.
          foreach ($ds_reqs as $ds_req_dsid => $ds_req) {
            if (array_key_exists('optional', $ds_req) && $ds_req['optional']) {
              $required_datastreams[] = strtoupper($ds_req_dsid);
            }
          }
        }
      }
    }
  }
  // Loop through the $required_datastreams, assume TRUE - set to FALSE if any
  // not found in $object_datastreams.
  $success = TRUE;
  $required_datastream_index = 0;
  while ($success && $required_datastream_index < count($required_datastreams)) {
    $dsid = $required_datastreams[$required_datastream_index];
    $success |= (array_key_exists($dsid, $object_datastreams));
    $required_datastream_index++;
  }
  // if $success is still TRUE, all derivatives have been created according to
  // the object model's requirements.
  if ($success) {
    module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
    $identifier = islandora_digital_workflow_get_object_identifier($object);
    $batch_item_arr = islandora_digital_workflow_get_batch_item_ids_by_identifier($identifier);
    foreach ($batch_item_arr as $batch_item_id) {
      islandora_digital_workflow_insert_transactions_record(IDW_ACTION_SYSTEM_MADE_DERIVATIVES, NULL, $batch_item_id, 0);
    }
  }
}

/**
 * Hook for hook_node_update.
 *
 * To display all of the related islandora_digital_workflow_batch record's
 * values on the Node page, this code will update the field_batch_defaults
 * field with the values from the batch record so that all of those do not
 * need to be CCK fields.
 */
function islandora_digital_workflow_node_update($node) {
  if ($node->type == 'workflow_batch') {
    global $system_creating_nodes;
    if (!$system_creating_nodes) {
      module_load_include('inc', 'islandora_digital_workflow', 'includes/node_utilities');
      islandora_digital_workflow_sync_node_batch_record_info($node, array(), '', FALSE);
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Set a callback to handle the #after_build for the workflow_batch core Drupal
 * "node edit" form.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @param string $form_id
 *   The form_id that is being validated -- optional.
 */
function islandora_digital_workflow_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'workflow_batch_node_form') {
    $form['#after_build'][] = 'islandora_digital_workflow_node_after_build';
  }
}

/**
 * Routine to lock the field_batch_name CCK field on the node edit form.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @return array
 *   A Drupal form definition.
 */
function islandora_digital_workflow_node_after_build($form, &$form_state) {
  // Only lock the batch name field down if there is a value for it already.
  if (array_key_exists('value', $form['field_batch_name']['und'][0]) && $form['field_batch_name']['und'][0]['value']['#value'] <> '') {
    $form['field_batch_name']['und'][0]['value']['#attributes'] = array_merge(
        array('class' => array('disabled_text'), 'readonly' => 'readonly', 'disabled' => 'disabled'),
        $form['field_batch_name']['und'][0]['value']['#attributes']
    );
    $form['title']['#attributes'] = array_merge(
        array('class' => array('disabled_text'), 'readonly' => 'readonly', 'disabled' => 'disabled'),
        $form['title']['#attributes']
    );
  }
  return $form;
}

/**
 * Checks whether the node is a workflow_batch - and potentially whether or not
 * the user has access to this permission.
 *
 * @param string $permission
 *   Name of the permission to check.
 * @param object $node
 *   Drupal node
 * @return boolean
 *   Whether or not the user has access to the node view.
 */
function islandora_digital_workflow_access_node($permission, $node) {
  if ($node->type <> 'workflow_batch') {
    return FALSE;
  }
  else {
    return user_access($permission);
  }
}

/**
 * Implementation of hook_views_api().
 */
function islandora_digital_workflow_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'islandora_digital_workflow'),
  );
}

/**
 * Theme function to display order_manage objects.
 *
 * These rows are draggable and need to be themed in this way.
 *
 * @param array $variables
 *   Drupal template variables.
 * @return string
 *   Markup of the themed order_manage object
 */
function theme_islandora_digital_workflow_workflow_sequence_actions_form($variables) {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
  $form = $variables['form'];
  $sequence_id = 9999;
  $rows = array();
  $this_action_id = $sequence_has_publish_action = $sequence_has_user_ingest_action = $sequence_has_ingest_action = $actions_after_ingest_action_are_prerequisites = FALSE;
  foreach (element_children($form['wrapper']['rows']) as $action_id) {
    $this_action_id = $action_id;
    $sequence_has_user_ingest_action |= ($action_id == IDW_ACTION_USER_INGEST);
    $sequence_has_ingest_action |= ($action_id == IDW_ACTION_SYSTEM_INGESTED);
    $sequence_has_publish_action |= ($action_id == IDW_PUBLISH_OBJECT);
    $action_record = islandora_digital_workflow_get_action($action_id);
    $form['wrapper']['rows'][$action_id]['weight']['#attributes']['class'] = array('rows-order-weight');
    $sequence_id = $form['wrapper']['rows'][$action_id]['workflow_sequence_id']['#value'];

    if ($sequence_has_ingest_action) {
      $actions_after_ingest_action_are_prerequisites |= ($form['wrapper']['rows'][$action_id]['is_ingest_prerequisite']['#value'] > 0);
    }
    $classes = array('draggable');
    $classes[] = (islandora_digital_workflow_is_batch_action($action_record)) ? 'batch_action' : 'item_action';
    // One final class pertains to the action name - to distinguish elements in the CSS.
    @list($keep, $junk) = explode(" [", $form['wrapper']['rows'][$action_id]['action_name']['#default_value']);
    $classes[] = islandora_digital_workflow_glyph_class($keep);
    $rows[] = array(
      'data' => array(
        array('class' => array('slide-cross')),
        drupal_render($form['wrapper']['rows'][$action_id]['action_id']),
        drupal_render($form['wrapper']['rows'][$action_id]['action_description']),
        drupal_render($form['wrapper']['rows'][$action_id]['is_ingest_prerequisite']),
        drupal_render($form['wrapper']['rows'][$action_id]['is_publish_prerequisite']),
        drupal_render($form['wrapper']['rows'][$action_id]['weight']),
        drupal_render($form['wrapper']['rows'][$action_id]['op']),
      ),
      'class' => $classes,
    );
  }
  $prefix_message = '';
  // Display a message if the publish action is not included or if it is not
  // the final action in the workflow sequence.
  if (!$sequence_has_publish_action) {
    $prefix_message = theme('islandora_digital_workflow_messages_div', array(
      'message_type' => 'warning',
      'message' => 'This sequence does not have the "<b>Publish the ' .
      'item</b>" action.  In order for the item to be considered "<span ' .
      'class="progress_completed">Completed</span>", this action is needs to ' .
      'be added to the workflow sequence as the final step and it should not ' .
      'ever be an <b>Ingest Prerequisite</b>.'));
  }
  // If the final action was not "Publish the item"...
  if (!($this_action_id == IDW_PUBLISH_OBJECT)) {
    $prefix_message .= theme('islandora_digital_workflow_messages_div', array(
      'message_type' => 'warning',
      'message' => 'The final action for any workflow sequence should be ' .
        'the "<b>Publish the item</b>" action.  Please ' .
        ((!$sequence_has_publish_action) ? 'add it and then ' : '') .
        'drag it to the bottom and save the changes.'));
  }
  if ($actions_after_ingest_action_are_prerequisites) {
    $prefix_message .= theme('islandora_digital_workflow_messages_div', array(
      'message_type' => 'warning',
      'message' => 'No actions that are set as "Ingest Prerequisite" can appear after the "Ingest object" action.'));
  }

  $header = array('', '', t('Action'), t('Ingest Prerequisite?'), t('Publish Prerequisite?'), t('Weight'), t('Operations'));
  $output = $prefix_message . '<p>Actions that are set to be <b>Required</b> ' .
    'will make any items that use this action in their workflow sequence to not ' .
    'be "<span class="progress_completed">Completed</span>" until all of the ' .
    'actions in its sequence have been added.</p>' .
    '<p>When a workflow sequence uses an action that is set to be an ' .
    '<b>Ingest Prerequisite</b>, the item can not be ingested until all of ' .
    'the "Ingest Prerequisite actions" have occurred.  Likewise, for actions ' .
    'that are set to be a <b>Publish Prerequisite</b>, the item can not be ' .
    'published until all of the "Publish Prerequisite actions" have been completed.</p>' .
    theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'rows-order-' . $sequence_id)));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag('rows-order-' . $sequence_id, 'order', 'sibling', 'rows-order-weight', NULL, NULL, FALSE);

  return $output;
}

/**
 * Implements hook_islandora_batch_process_finished().
 *
 * Sets the appropriate action on the objects that have been ingested.
 */
function islandora_digital_workflow_islandora_batch_process_finished($sets) {
  // Look at the object - and delete the related temporary files that were needed for this object.
  module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_batch', 'includes/db');

  if (!empty($sets)) {
    foreach ($sets as $set) {
      // Delete set and associated queued items.
      $queued_items = islandora_batch_get_queued_items_for_set($set);

      foreach ($queued_items as $ingested_pid) {
        $ingested_object = islandora_object_load($ingested_pid);
        if (is_object($ingested_object)) {
          // Update the batch status record for the matching batch record for this set's $ingested_pid.
          islandora_digital_workflow_set_status_for_pid($ingested_object, IDW_ACTION_SYSTEM_INGESTED);
        }
        else {
          $variables = array('@ingested_pid' => $ingested_pid, '@set' => $set);
          watchdog('islandora_digital_workflow', 'Set refers to an object by PID "@ingested_pid" that no longer exists, ' .
              'and can not execute the batch_process_finished routine for this set @set.', $variables, WATCHDOG_NOTICE);
        } // if (is_object($ingested_object)
      } //  foreach ($queued_items
    } // foreach ($sets
  } // if (!empty($sets
}

/**
 * Implements hook_preprocess_page().
 *
 * This code will add a breadcrumb to any node page that is of type `workflow_batch`.
 */
function islandora_digital_workflow_preprocess_page(&$vars) {
  if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
    $node = node_load(arg(1));
    if ( $node->type == 'workflow_batch' ) {
      // islandora/islandora_digital_workflow » {current node title}.
      $title = (arg(2) == 'item' && is_numeric(arg(3))) ?
              l($node->title, 'node/' . arg(1) . '/items') : $node->title;
      $vars['breadcrumb'] = theme('breadcrumb', array(
          'breadcrumb' => array(
              l('Islandora Digital Workflow', 'islandora/islandora_digital_workflow'),
              $title,
          ))
      );
      // Loop through the tabs and remove the "Edit" node tab... no need for that
      // interface to confuse users when the "Edit Batch" tab is more appropriate.
      if ( array_key_exists('tabs', $vars) && array_key_exists('#primary', $vars['tabs']) &&
          is_array($vars['tabs']['#primary']) ) {
        $index_to_unset = NULL;
        foreach ($vars['tabs']['#primary'] as $index => $a_tab ) {
          if ( array_key_exists('#link', $a_tab) && array_key_exists('path', $a_tab['#link']) &&
            ($a_tab['#link']['path'] == 'node/%/edit') ) {
            $index_to_unset = $index;
          }
        }
        if (!is_null($index_to_unset)) {
          unset($vars['tabs']['#primary'][$index_to_unset]);
        }
      }
    }
    elseif ($node->type == 'webform' && module_exists('islandora_digitization_requests') &&
        user_access(ISLANDORA_DIGITAL_WORKFLOW_CREATE_DIGITIZATION_REQUEST)) {
      $nid = arg(1);

      // Make sure that this webform is registered as one of the digitization
      // requests before setting the message on the screen.
      if (array_key_exists('page', $vars) &&
        array_key_exists('content', $vars['page']) &&
        array_key_exists('system_main', $vars['page']['content']) &&
        array_key_exists('nodes', $vars['page']['content']['system_main']) &&
        array_key_exists($nid, $vars['page']['content']['system_main']['nodes']) &&
        array_key_exists('webform', $vars['page']['content']['system_main']['nodes'][$nid])) {

        $webform_options = variable_get('islandora_digital_workflow_digitization_requests', array());
        $submission_prefix = (array_key_exists($nid, $webform_options) &&
          array_key_exists('message_info_' . $nid, $webform_options[$nid])) ?
          $webform_options[$nid]['message_info_' . $nid] : '';
        if ($submission_prefix) {
          module_load_include('inc', 'islandora_digitization_requests', 'includes/db');
          $webforms = islandora_digitization_requests_get_webforms();
          $digitization_request_webforms = islandora_digitization_requests_get_digitization_request_webforms($webforms);
          if (array_key_exists($nid, $digitization_request_webforms)) {
            drupal_set_message($submission_prefix, 'message_info');
          }
        }
      }
    }
  }
}

/**
 * To provide a callback for the users who have permission to the workflow to
 * inject a link to the workflow to the HTML output.
 */
function islandora_digital_workflow_user_view_alter(&$build) {
  // Before hooking in a post-render callback, check that the user should
  // has ISLANDORA_DIGITAL_WORKFLOW permission to the workflow dashboard.
  if (user_access(ISLANDORA_DIGITAL_WORKFLOW, $build['#account'])) {
    // Add a #post_render callback to act on the rendered HTML of the user.
    $build['#post_render'][] = 'islandora_digital_workflow_user_post_render';
  }
}

/**
 * This will return the user view markup with a link to the Islandora Digital
 * Workflow injected at the top of the content.
 *
 * This is a bit of a hack to do it this way -- it exists as a link in the
 * Navigation menu under the Islandora Repository link (/islandora)... which
 * is a block that I believe MOST institutions would not display.
 *
 * @param type $markup
 */
function islandora_digital_workflow_user_post_render(&$markup) {
  $dashboard_link = l('Islandora Digital Workflow', 'islandora/islandora_digital_workflow',
          array('attributes' => array('class' => array('big_workflow_link'))));
  print str_replace('content">','content">' . $dashboard_link, $markup);
}

/**
 * Implements hook_page_alter().
 *
 * This code will inject a link to any Webform submission that is.
 */
function islandora_digital_workflow_page_alter(&$page) {
  if (array_key_exists('content', $page) && array_key_exists('system_main', $page['content']) &&
      array_key_exists('#theme', $page['content']['system_main']) && 
      array_key_exists('#submission_information', $page['content']['system_main']) &&
      $page['content']['system_main']['#theme'] == 'webform_submission_page') {
    $nid = arg(1);
    $sid = arg(3);
    $webform_digitization_requests = variable_get('islandora_digitization_requests_webform_forms', array());
    if (!(array_key_exists($nid, $webform_digitization_requests) === FALSE) &&
        isset($webform_digitization_requests[$nid]) && $webform_digitization_requests[$nid]['selected']) {
      // If the request was never mapped to a batch, display this message...
      module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
      $batches = islandora_digital_workflow_get_batch_of_webformsubmission($sid);
      $was_mapped = (is_array($batches) && (count($batches) > 0));
      if ($was_mapped) {
        $link_attributes = array('attributes'=>array(
          'title' => 'link opens in separate tab',
          'class' => array('link_open_new_tab_tiny'),
          'target' => '_blank'));
        $links = array();
        foreach ($batches as $batch) {
          // Create the right link depending on whether or not the batch has been
          // finalized or if it is just a "stub record".
          $links[] = ($batch->nid) ?
            l($batch->batch_name, 'node/' . $batch->nid . '/items', $link_attributes) :
            l($batch->batch_name, 'islandora/islandora_digital_workflow/edit_batch/'  . $batch->batch_name, $link_attributes);
        }
        $batch_record = array_pop($batches);
        $batch_name = $batch_record->batch_name;
        $page['content']['system_main']['#submission_information'] =
          theme('islandora_digital_workflow_messages_div', array(
            'message_type' => 'warning',
            'message' => l('Convert this Digitization Request into an Islandora Digital ' .
                'Workflow batch.', 'islandora/islandora_digital_workflow/map_digitization_request_to_batch/' . $nid . '/' . $sid) .
              '<hr><b class="bad">Are you sure that you want to map this same ' .
              'request into another batch?</b>  <b>This digitization request has ' .
              'already been mapped to at least one batch already:</b> <i>(links ' .
              'open in separate tab)</i><ul><li>' .
              implode("</li><li>", $links) . '</li></ul></div>' .
              $page['content']['system_main']['#submission_information'],
          ));
      }
      else {
        $page['content']['system_main']['#submission_information'] = theme('islandora_digital_workflow_messages_div', array(
            'message_type' => 'warning',
            'message' => l('Convert this Digitization Request into an Islandora Digital Workflow batch.',
                'islandora/islandora_digital_workflow/map_digitization_request_to_batch/' . $nid . '/' . $sid) .
            '</div>' . $page['content']['system_main']['#submission_information'],
          ));
      }
    }
  }
  elseif (array_key_exists('content', $page) && array_key_exists('system_main', $page['content'])) {
    // Add the batch_description content to the top of the "Edit Batch Record" page.
    $item = menu_get_item();
    if ($item['path'] == 'node/%' || $item['path'] == 'node/%/batch') {
      $nid = arg(1);
      $node = node_load($nid);
      module_load_include('inc', 'islandora_digital_workflow', 'includes/db');
      module_load_include('inc', 'islandora_digital_workflow', 'includes/utilities');
      if (is_object($node) && $node->type == 'workflow_batch') {
        // Check to see if the HTTP_REFERRER to see if it is coming from one
        // of the drupal core taxonomy pages like "taxonomy/term/149/view".
        $referrer = $_SERVER['HTTP_REFERER'];
        if ($item['path'] == 'node/%' && strstr($referrer, 'taxonomy/term/')) {
          // Redirect this immediately to the "Batch Items" page.
          drupal_goto('node/' . $nid . '/items');
          return;
        }
        $batch_record = islandora_digital_workflow_get_batch_record_by_nid($nid);
        $batch_items = islandora_digital_workflow_get_batch_items_by_nid($batch_record['nid']);
        $batch_description_markup = theme('islandora_digital_workflow_batch_description', array(
          'batch_record' => $batch_record,
          'collection_review_links' => islandora_digital_workflow_collection_review_links($batch_record),
          'can_ingest_all' => islandora_digital_workflow_can_ingest_all($batch_items),
          'can_publish_all' => islandora_digital_workflow_can_publish_all($batch_items),
          'batch_mapped_from_webformsubmission' => islandora_digital_workflow_get_webformsubmission($batch_record['webform_submission_sid']),
        ));
        // This insertion is a bit of a hack -- but safe and easier than inserting
        // this into the actual batch edit code.
        if (array_key_exists('main', $page['content']['system_main']) &&
            array_key_exists('#markup', $page['content']['system_main']['main'])) {
          $page['content']['system_main']['main']['#markup'] = 
              str_replace('<form enctype=', $batch_description_markup . "\n" .
                  '<form enctype=', $page['content']['system_main']['main']['#markup']);
        }
      }
    }
  }
}
